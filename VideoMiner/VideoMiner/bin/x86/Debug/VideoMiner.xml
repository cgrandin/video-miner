<?xml version="1.0"?>
<doc>
<assembly>
<name>
VideoMiner
</name>
</assembly>
<members>
<member name="M:VideoMiner.BitmapEncoder.ConvertBitmapTo1bpp(System.Drawing.Bitmap)">
 <summary>
 Copies a bitmap into a 1bpp bitmap of the same dimensions, fast
 </summary>
 <param name="b">original bitmap</param>
 <returns>a 1bpp copy of the bitmap</returns>
</member>
<member name="T:VideoMiner.Database">
 <summary>
 This module encapsulates the reading and writing to an MS Access database using the OLEDB interface
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.Database.DB_CONN_STRING">
 <summary>
 Connection string header fragment. The full path of the MS Access database will be appended
 to this string to get the full connection string.
 </summary>
</member>
<member name="F:VideoMiner.Database.m_strDatabaseFilePath">
 <summary>
 The full-path name of the MS Access database file (mdb file).
 </summary>
</member>
<member name="F:VideoMiner.Database.m_data_adapter_data">
 <summary>
 The data adapter for the 'data' table in the database
 </summary>
 <remarks>A seperate data adapter is needed for each table which may be modified by the Update function</remarks>
</member>
<member name="P:VideoMiner.Database.Name">
 <summary>
 The full path name of the MS Access database file (.mdb file)
 </summary>
</member>
<member name="P:VideoMiner.Database.ConnectionString">
 <summary>
 The full connection string for the data source.
 </summary>
</member>
<member name="P:VideoMiner.Database.IsOpen">
 <summary>
 Whether or not the database has been opened using the Open() function
 </summary>
</member>
<member name="M:VideoMiner.Database.Open">
 <summary>
 Opens the database. Returns True if successful, false otherwise.
 </summary>
 <returns>Boolean</returns>
 <remarks>If an exception is thrown, a messagebox will appear and False will be returned</remarks>
</member>
<member name="M:VideoMiner.Database.Close">
 <summary>
 Closes the database. Returns True if successful, false otherwise.
 </summary>
 <returns>Boolean</returns>
 <remarks>If an exception is thrown, a messagebox will appear and False will be returned</remarks>
</member>
<member name="M:VideoMiner.Database.GetDataTableSchema">
 <summary>
 Runs a schema table for the MS Access database
 </summary>
 <returns>A DataTable which holds the database schema or Nothing</returns>
 <remarks>If an exception is thrown or the database connection is not open, a messagebox will appear and Nothing will be returned.</remarks>
</member>
<member name="M:VideoMiner.Database.ExecuteNonQuery(System.String)">
 <summary>
 Executes a query on the database which does not return data. Examples are UPDATE, DELETE, or INSERT queries.
 Create table queries are also allowed.
 </summary>
 <param name="query">The query to execute on the MS Access database</param>
 <returns>True if the query was successful, false otherwise and false if an exception was thrown</returns>
 <remarks>If an exception is thrown or the database connection is not open, a messagebox will appear and False will be returned.</remarks>
</member>
<member name="M:VideoMiner.Database.Update(System.Data.DataTable,System.String)">
 <summary>
 Runs an update query on the data adapter with the given data_table for the main data recording table.
 </summary>
 <returns>True if successful, false otherwise</returns>
 <remarks>If an exception is thrown or the database connection is not open, a messagebox will appear and False will be returned.</remarks>
</member>
<member name="M:VideoMiner.Database.AddColumn(System.String,System.String)">
 <summary>
 Add a column strColumnName to the table given by tableName.
 </summary>
 <returns></returns>
</member>
<member name="M:VideoMiner.Database.GetRow(System.Int32,System.String)">
 <summary>
 Return the DataRow which corresponds to the primary key intKey.
 Returns Nothing if the key wasn't in the table.
 </summary>
</member>
<member name="M:VideoMiner.Database.InsertRow(System.Data.DataRow,System.String)">
 <summary>
 Runs an insert query to insert a new row of data in the table given by tableName.
 It is up to the caller to make sure the data match the table being inserted into.
 </summary>
 <returns>True if successful, false otherwise</returns>
 <remarks>If an exception is thrown or the database connection is not open, a messagebox will appear and False will be returned.</remarks>
</member>
<member name="M:VideoMiner.Database.DeleteRow(System.Int32,System.String)">
 <summary>
 Runs a delete query to delete the row which has the primary key value given by intPrimaryKey
 from the table given by tableName.
 </summary>
 <returns>True if successful, False is the primary key was not found in the table or if an exception is thrown</returns>
</member>
<member name="M:VideoMiner.Database.GetPrimaryKeyFieldName(System.String)">
 Returns the name of the primary key field in the table given by tableName.
 If the table does not contain a primary key column or the database is not open,
 'Nothing' will be returned.
 Assumes the primary key is made up of one column only. If there is more than one, only the first
 will be returned.
</member>
<member name="M:VideoMiner.Database.SwapTwoRecords(System.Int32,System.Int32,System.String)">
 <summary>
 Swap two records in the database table given by tableName. The two records with the primary keys
 intKey1 and intKey2 will be deleted, and reinserted with their primary keys swapped.
 </summary>
</member>
<member name="M:VideoMiner.Database.GetDataRow(System.Int32,System.String)">
 <summary>
 Returns the DataRow for the given key intKey in table tableName.
 Returns Nothing if the key is not in the table.
 </summary>
 <param name="intKey"></param>
</member>
<member name="T:VideoMiner.DynamicButton">
 <summary>
 A Videominer dynamic button. This button extends a regular button by holding 
 the database table name, an instance of the DataTable, the current data code,
 and the code name.
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.DynamicButton.m_table_name">
 <summary>
 Name of the MS Access table associated with this button
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton.m_data_table">
 <summary>
 Table of data found in the m_db_table_name table in the MS Access database.
 Used only if m_which_entry_style = Table.
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton._m_frmTableView">
 <summary>
 An instance of the table view form of the m_db_data_table used if m_which_entry_style = Table
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton._m_frmSpeciesEvent">
 <summary>
 The instance of the species event form used if m_which_entry_style = Quick or Detailed.
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton._m_frmAbundanceTableView">
 <summary>
 An instance of the abundance table view form used if m_which_entry_style = Abundance.
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton.m_drawing_order">
 <summary>
 Drawing order number for this button
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton.m_button_text">
 <summary>
 Text for the button.
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton.m_button_code">
 <summary>
 Code for the button. This may not be set if the button type is for a data table.
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton.m_button_code_name">
 <summary>
 Name for the button code. This may not be set if the button type is for a data table.
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton.m_data_code">
 <summary>
 Data code as seen in the database table 'lu_data_codes'
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton.m_data_code_name">
 <summary>
 Data code name as seen in the database table 'data'
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton.m_button_color">
 <summary>
 Microsoft palette color to use for the button text (e.g. DarkOrchid)
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton.m_button_font">
 <summary>
 Font family, e.g. 'Arial'. If invalid, 'Microsoft Sans Serif' will be used
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton.m_button_text_size">
 <summary>
 Font size for the button text. If invalid, 10 will be used.
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton.m_keyboard_shortcut">
 <summary>
 A String representing a keyboard shortcut. This is what can be pressed to trigger a Click event on the button.
 </summary>
</member>
<member name="T:VideoMiner.DynamicButton.WhichEntryStyleEnum">
 <summary>
 Enumeration for which type of data entry this button represents.
 Quick means that no frmSpeciesEvent will be opened, data entered upon buttonpress
 Detailed opens a frmSpeciesEvent form for detailed entry
 Abundance opens an abundance table for row selection by user.
 Table opens a database table for row selection by user.
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton.m_which_entry_style">
 <summary>
 Holds the style of entry for species data
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton.m_data_value">
 <summary>
 The value of the chosen data from clicking the button and submitting the forms which appear.
 It must be a string so that UNINITIALIZED_DATA_VALUE can be passed to the SQL query if it was not chosen to be part of the query.
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton.m_current_comment">
 <summary>
 Currently entered comment
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton.m_dict">
 <summary>
 Dictionary of key/value pairs that hold the currently selected data.
 The first parameter is the name of the field in the database table lu_data, the second is the tuple above.
 </summary>
</member>
<member name="F:VideoMiner.DynamicButton.m_quick_entry_num">
 <summary>
 The number to use for a quick species entry
 </summary>
</member>
<member name="E:VideoMiner.DynamicButton.StartDataEntryEvent">
 <summary>
 This event will be fired when the user clicks the button.
 </summary>
</member>
<member name="E:VideoMiner.DynamicButton.EndDataEntryEvent">
 <summary>
 This event will propagate an event sent by either m_frmSpeciesEvent, m_frmAbundanceTableView, or m_frmTableView.
 It is sent to signal the end of the data entry, i.e. when the subforms mentioned are closed.
 </summary>
</member>
<member name="E:VideoMiner.DynamicButton.DataEntryCanceled">
 <summary>
 Fires when user presses Cancel or 'X' button.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="E:VideoMiner.DynamicButton.ClearEvent">
 <summary>
 Fires when the frmTableView is cleared via its clear button or a ctrl-click of this button
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="P:VideoMiner.DynamicButton.DataCode">
 <summary>
 Data code used for table-based data. e.g. table lu_survey_mode is associated with data code 9 in the lu_data_codes table
 </summary>
</member>
<member name="P:VideoMiner.DynamicButton.WhichEntryStyle">
 <summary>
 Enumeration type for style of entry for this panel. Only applies to species panels.
 See WhichEntryStyleEnum for descriptions.
 </summary>
</member>
<member name="M:VideoMiner.DynamicButton.ShowForm(System.Object,System.EventArgs)">
 <summary>
 Show the correct form based on the WhichTypeEnum value.
 </summary>
</member>
<member name="M:VideoMiner.DynamicButton.RecordDetailed">
 <summary>
 Open the species event form to record a detailed species event.
 </summary>
</member>
<member name="M:VideoMiner.DynamicButton.RecordQuick">
 <summary>
 Record count value to the frmSpeciesEvent.
 </summary>
</member>
<member name="M:VideoMiner.DynamicButton.RecordAbundance">
 <summary>
 Record an abundance only event.
 </summary>
</member>
<member name="M:VideoMiner.DynamicButton.RecordTable">
 <summary>
 Record an data table row selection event.
 </summary>
</member>
<member name="M:VideoMiner.DynamicButton.abundanceDataChanged(System.Object,System.EventArgs)">
 <summary>
 Handle the changing by the user of the lookup table code found in frmTableView, and fire an event to the parent.
 </summary>
</member>
<member name="M:VideoMiner.DynamicButton.clearData">
 <summary>
 Handle the clearing of the data field in the table by resetting the DataCode and DataComment to Nothing and
 firing an event to signal the parent.
 </summary>
</member>
<member name="M:VideoMiner.DynamicButton.endDataEntryEventHandler(System.Object,System.EventArgs)">
 <summary>
 Bubbles the EndDataEntryEvent up.
 </summary>
</member>
<member name="M:VideoMiner.DynamicButton.dataEntryCanceledHandler(System.Object,System.EventArgs)">
 <summary>
 Bubbles the DataEntrytCanceledEvent up so that video can be set to play again when the user decides to cancel data entry.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="T:VideoMiner.DynamicSpeciesButtonPanel">
 <summary>
 A panel which supports loading of dynamic species buttons.
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.DynamicSpeciesButtonPanel.m_num_dynamic_buttons">
 <summary>
 The number of dynamic buttons currently on the panel
 </summary>
</member>
<member name="F:VideoMiner.DynamicSpeciesButtonPanel.m_dynamic_buttons">
 <summary>
 Array of Dynamic buttons. This will be redimensioned at runtime
 </summary>
</member>
<member name="F:VideoMiner.DynamicSpeciesButtonPanel.m_y_offset">
 <summary>
 Lets the fillPanel function know at what vertical level to start placing dynamic buttons
 </summary>
</member>
<member name="F:VideoMiner.DynamicSpeciesButtonPanel.m_gap">
 <summary>
 Gap between dynamic buttons.
 </summary>
</member>
<member name="F:VideoMiner.DynamicSpeciesButtonPanel.m_tuple">
 <summary>
 A tuple for the Dictionary object, m_dict.
 </summary>
</member>
<member name="F:VideoMiner.DynamicSpeciesButtonPanel.m_dict">
 <summary>
 Dictionary of key/value pairs that hold the currently selected data (most recently-pressed button's data) for this panel.
 If the repeat checkbox is visible and checked, the dictionary will hold the key/value pairs for all buttons on the panel,
 not just the most recently-pressed button's data.
 The first parameter is the name of the field in the database table lu_data. The tuple is a triplet of data code (from lu_data_codes),
 the data value to be inserted, and a boolean for whether or not the item was the one pressed (in case there are more than one in the dictionary).
 </summary>
</member>
<member name="F:VideoMiner.DynamicSpeciesButtonPanel.m_data_code">
 <summary>
 Data code used for species buttons. Should be 4 for species events.
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.DynamicSpeciesButtonPanel.m_which_entry_style">
 <summary>
 Holds the enumeration type for this instance
 </summary>
</member>
<member name="F:VideoMiner.DynamicSpeciesButtonPanel.m_quick_entry_num">
 <summary>
 The number to use for a quick species entry
 </summary>
</member>
<member name="E:VideoMiner.DynamicSpeciesButtonPanel.StartDataEntryEvent">
 <summary>
 Signals the parent that a button has been pressed on this panel and data entry has started.
 </summary>
</member>
<member name="E:VideoMiner.DynamicSpeciesButtonPanel.EndDataEntryEvent">
 <summary>
 Signals the parent that data entry has ended.
 </summary>
</member>
<member name="E:VideoMiner.DynamicSpeciesButtonPanel.DataEntryCanceled">
 <summary>
 Fires when user presses Cancel or 'X' button.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="E:VideoMiner.DynamicSpeciesButtonPanel.CheckForDirtyDataEvent">
 <summary>
 Fire event to have parent form check for dirty data or anything else prior to launching the button code.
 </summary>
</member>
<member name="P:VideoMiner.DynamicSpeciesButtonPanel.Dictionary">
 Dictionary of key/value pairs that hold the currently set data for this panel.
 If the repeat checkbox is visible and checked, the dictionary will hold the key/value pairs for all buttons on the panel,
 not just the most recently-pressed button's data.
</member>
<member name="M:VideoMiner.DynamicSpeciesButtonPanel.#ctor(System.String,System.Int32,System.Int32,System.String,System.Int32,VideoMiner.DynamicButton.WhichEntryStyleEnum)">
 <summary>
 Create the DynamicSpeciesButtonPanel object.
 </summary>
 <param name="strName">Name of the panel. Required for distinction between panels</param>
 <param name="intButtonWidth">The width of all the buttons on the panel.</param>
 <param name="intButtonHeight">The height of all the buttons on the panel.</param>
 <param name="strButtonFont">The font for all the buttons on the panel.</param>
 <param name="intButtonTextSize">The font size (pts) for all the buttons on the panel.</param>
</member>
<member name="M:VideoMiner.DynamicSpeciesButtonPanel.fillPanel(System.String)">
 <summary>
 Fills the panel with the buttons described in the MS Access table given by strTableName
 </summary>
 <param name="strTableName">Name of the button description table in the MS Access database</param>
</member>
<member name="M:VideoMiner.DynamicSpeciesButtonPanel.placeControls">
 <summary>
 Place the controls in the panel in a grid fashion.
 </summary>
</member>
<member name="M:VideoMiner.DynamicSpeciesButtonPanel.removeAllDynamicControls">
 <summary>
 Removes all dynamic controls (DynamicButton and DynamicTextbox controls) from the panel.
 </summary>
</member>
<member name="M:VideoMiner.DynamicSpeciesButtonPanel.buildDictionary(VideoMiner.DynamicButton)">
 <summary>
 Build the dictionary of key/value pairs.
 </summary>
 <param name="btn">The button to build the dictionary for.</param>
</member>
<member name="M:VideoMiner.DynamicSpeciesButtonPanel.setWhichEntryStyleButtons">
 <summary>
 Set all dynamic buttons to have the same WhichEntryStyle as this panel.
 </summary>
</member>
<member name="M:VideoMiner.DynamicSpeciesButtonPanel.startDataEntryEventHandler(System.Object,System.EventArgs)">
 <summary>
 Tell the program to issue a pause video command
 </summary>
 <param name="sender">The DynamicSpeciesButton that was pressed</param>
</member>
<member name="M:VideoMiner.DynamicSpeciesButtonPanel.endDataEntryEventHandler(System.Object,System.EventArgs)">
 <summary>
 Tell the program to issue a play video command
 </summary>
 <param name="sender">The DynamicSpeciesButton that was pressed</param>
</member>
<member name="M:VideoMiner.DynamicSpeciesButtonPanel.button_CheckForDirtyDataEvent(System.Object,System.EventArgs)">
 <summary>
 If a DynamicSpeciesButton is pressed, this will send that DynamicSpeciesButton object as an argument to the event
 </summary>
 <param name="sender">The DynamicSpeciesButton that was pressed</param>
</member>
<member name="M:VideoMiner.DynamicSpeciesButtonPanel.ClickButton(System.String)">
 <summary>
 The dynamic button with the text 'strSpecies' will be clicked programmatically.
 This is so that when keyboard shortcuts are used in the main Videominer form,
 the correct button will be clicked causing the cascading events which lead to
 correct entry into the database
 </summary>
 <param name="strSpecies"></param>
</member>
<member name="M:VideoMiner.DynamicSpeciesButtonPanel.changeQuickEntryNum(System.Int32)">
 <summary>
 Change the quick entry number for all DynamicButtons on this panel
 </summary>
</member>
<member name="M:VideoMiner.DynamicSpeciesButtonPanel.dataEntryCanceledHandler(System.Object,System.EventArgs)">
 <summary>
 Bubbles the DataEntrytCanceledEvent up so that video can be set to play again when the user decides to cancel data entry.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="T:VideoMiner.DynamicTableButton">
 <summary>
 A Videominer dynamic table button and textbox on a small panel.
 When the button is pressed, a database table will be shown and the user can
 select the row they want. Once the row is selected, the value will be shown in the Textbox.
 The DynamicTextbox shows the current status of the variable the button
 represents.
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.DynamicTableButton._m_btnButton">
 <summary>
 The button used to issue a data changed event for the variable the button represents.
 </summary>
</member>
<member name="F:VideoMiner.DynamicTableButton.m_txtStatus">
 <summary>
 A textbox attached below the button which shows the current value of the variable for the button.
 </summary>
</member>
<member name="T:VideoMiner.DynamicTableButton.WhichTypeEnum">
 <summary>
 Distinguishes between the two types of data this button can represent, database table
 data (lookup tables stored as type DataTable) or UserEntered which are not a DataTable
 and are entered via a form such as Field Of View.
 </summary>
</member>
<member name="F:VideoMiner.DynamicTableButton.m_which_type">
 <summary>
 Holds the enumeration type for this instance
 </summary>
</member>
<member name="P:VideoMiner.DynamicTableButton.ControlWidth">
 <summary>
 Width of the control
 </summary>
 <returns></returns>
</member>
<member name="P:VideoMiner.DynamicTableButton.ControlHeight">
 <summary>
 Height of the control, including button and textbox
 </summary>
 <returns></returns>
</member>
<member name="E:VideoMiner.DynamicTableButton.StartDataEntryEvent">
 <summary>
 This event will be fired when the user clicks the button.
 </summary>
</member>
<member name="E:VideoMiner.DynamicTableButton.EndDataEntryEvent">
 <summary>
 This event will propagate an event sent by either m_frmSpeciesEvent, m_frmAbundanceTableView, or m_frmTableView.
 It is sent to signal the end of the data entry, i.e. when the subforms mentioned are closed.
 </summary>
</member>
<member name="E:VideoMiner.DynamicTableButton.DataEntryCanceled">
 <summary>
 Fires when user presses Cancel or 'X' button.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:VideoMiner.DynamicTableButton.#ctor(System.Data.DataRow,System.Int32,System.Int32,VideoMiner.DynamicTableButton.WhichTypeEnum)">
 <summary>
 Creates the button, for the case in which the button refers to a database code table.
 </summary>
 <param name="row">A DataRow object holding a row of data used to initialize the button</param>
 <param name="whichType">Used to signify the difference between database-table based forms or a user form.</param>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.DynamicTableButton.startDataEntryEventHandler(System.Object,System.EventArgs)">
 <summary>
 Tell parent that data entry has started
 </summary>
</member>
<member name="M:VideoMiner.DynamicTableButton.endDataEntryEventHandler(System.Object,System.EventArgs)">
 <summary>
 Tell parent that data entry has ended
 </summary>
</member>
<member name="M:VideoMiner.DynamicTableButton.dataEntryCanceledHandler(System.Object,System.EventArgs)">
 <summary>
 Bubbles the DataEntrytCanceledEvent up so that video can be set to play again when the user decides to cancel data entry.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="T:VideoMiner.DynamicTableButtonPanel">
 <summary>
 A panel that holds dynamic buttons which load database table forms when pressed.
 The panel contains a TableLayoutPanel with two rows and one columnn. The top cell
 contains another TableLayoutPanel which is 2x2 and holds the static controls. The repeat
 for every record checkbox is in the top two cells which are merged, the define all and
 disable buttons buttons are in the lower two cells.
 The lower cell in the main panel is a 2-colum TableLayoutPanel, and is built when the function
 fillPanel is called. This inserts the dynamic buttons, one to a cell from top to bottom in the
 first column, then top to bottom in the second column. If the form is resized, these controls
 are all replaced so that they remain in unison with each other and with the static controls
 in the top cell of the main panel.
 </summary>
</member>
<member name="F:VideoMiner.DynamicTableButtonPanel.m_repeat_for_every_record">
 <summary>
 If checked, the data will be recorded for every insert
 </summary>
 <remarks>This may or may not be shown in the panel</remarks>
</member>
<member name="F:VideoMiner.DynamicTableButtonPanel.m_define_all_button">
 <summary>
 The 'DEFINE ALL' button which simply opens all dynamic buttons on the panel up in succession,
 allowing the user to define all attributes at once.
 </summary>
 <remarks>This may or may not be shown in the panel</remarks>
</member>
<member name="F:VideoMiner.DynamicTableButtonPanel.m_static_button_panel">
 <summary>
 Necessary to hold the two buttons m_disable_buttons_button and m_define_all_button,
 and m_repeat_for_every_record in a 2x2 grid.
 </summary>
</member>
<member name="F:VideoMiner.DynamicTableButtonPanel.m_dynamic_button_panel">
 <summary>
 Holds the dynamic buttons in a 2-column table layout panel. The number of rows will depend
 on how many buttons are defined by the user.
 </summary>
</member>
<member name="F:VideoMiner.DynamicTableButtonPanel.m_main_panel">
 <summary>
 A two-row, one-column table layout panel which holds the m_static_button_panel on top
 and the m_dynamic_button_panel on the bottom.
 </summary>
</member>
<member name="F:VideoMiner.DynamicTableButtonPanel.m_num_dynamic_buttons">
 <summary>
 The number of dynamic buttons currently on the panel
 </summary>
</member>
<member name="F:VideoMiner.DynamicTableButtonPanel.m_dynamic_buttons">
 <summary>
 Array of Dynamic buttons. This will be redimensioned at runtime
 </summary>
</member>
<member name="F:VideoMiner.DynamicTableButtonPanel.m_tuple">
 <summary>
 A tuple for the Dictionary object, m_dict.
 </summary>
</member>
<member name="F:VideoMiner.DynamicTableButtonPanel.m_dict">
 <summary>
 Dictionary of key/value pairs that hold the currently selected data (most recently-pressed button's data) for this panel.
 If the repeat checkbox is visible and checked, the dictionary will hold the key/value pairs for all buttons on the panel,
 not just the most recently-pressed button's data.
 The first parameter is the name of the field in the database table lu_data. The tuple is a triplet of data code (from lu_data_codes),
 the data value to be inserted, and a boolean for whether or not the item was the one pressed (in case there are more than one in the dictionary).
 </summary>
</member>
<member name="F:VideoMiner.DynamicTableButtonPanel.m_data_code">
 <summary>
 Data code used for table-based data. e.g. table lu_survey_mode is associated with data code 9 in the lu_data_codes table
 </summary>
 <remarks></remarks>
</member>
<member name="E:VideoMiner.DynamicTableButtonPanel.StartDataEntryEvent">
 <summary>
 Signals the parent that a button has been pressed on this panel and data entry has started.
 </summary>
</member>
<member name="E:VideoMiner.DynamicTableButtonPanel.EndDataEntryEvent">
 <summary>
 Signals the parent that data entry has ended.
 </summary>
</member>
<member name="E:VideoMiner.DynamicTableButtonPanel.DataEntryCanceled">
 <summary>
 Fires when user presses Cancel or 'X' button.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="E:VideoMiner.DynamicTableButtonPanel.CheckForDirtyDataEvent">
 <summary>
 Fire event to have parent form check for dirty data or anything else prior to launching the button code.
 </summary>
</member>
<member name="P:VideoMiner.DynamicTableButtonPanel.Dictionary">
 Dictionary of key/value pairs that hold the currently set data for this panel.
 If the repeat checkbox is visible and checked, the dictionary will hold the key/value pairs for all buttons on the panel,
 not just the most recently-pressed button's data.
</member>
<member name="M:VideoMiner.DynamicTableButtonPanel.#ctor(System.String,System.Boolean,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Create the DynamicTableButtonPanel object.
 </summary>
 <param name="strName">Name of the panel. Required for distinction between panels</param>
 <param name="blIncludeDefineAllButton">True if you want to include a 'Define All' button.</param>
 <param name="intButtonWidth">The width of all the buttons on the panel.</param>
 <param name="intButtonHeight">The height of all the buttons on the panel.</param>
 <param name="strButtonFont">The font for all the buttons on the panel.</param>
 <param name="blIncludeRepeatCheckbox">True if you want to include a 'Repeat for each record' Checkbox on the panel.</param>
 <param name="blRepeatIsChecked">If True, the 'Repeat for each record' checkbox will be checked on creation.</param>
 <param name="intRepeatWidth">Width of the 'Repeat for each record' checkbox.</param>
 <param name="intRepeatHeight">Height of the 'Repeat for each record' checkbox.</param>
</member>
<member name="M:VideoMiner.DynamicTableButtonPanel.fillPanel(System.String)">
 <summary>
 Fills the panel with the buttons described in the MS Access table given by strTableName
 </summary>
 <param name="strTableName">Name of the button description table in the MS Access database</param>
</member>
<member name="M:VideoMiner.DynamicTableButtonPanel.getRowCount">
 <summary>
 Returns the number of rows that should be used given the number of dynamic buttons
 that must be placed.
 </summary>
</member>
<member name="M:VideoMiner.DynamicTableButtonPanel.placeControls">
 <summary>
 Place the controls in the panel in a grid fashion.
 </summary>
</member>
<member name="M:VideoMiner.DynamicTableButtonPanel.OnRezise_Form">
 <summary>
 Change the size and placement of the dynamic buttons to be the same as the ones in the m_static_buttons_panel
 </summary>
</member>
<member name="M:VideoMiner.DynamicTableButtonPanel.removeAllDynamicControls">
 <summary>
 Removes all dynamic controls (DynamicButton and DynamicTextbox controls) from the panel.
 </summary>
</member>
<member name="M:VideoMiner.DynamicTableButtonPanel.buildDictionary(VideoMiner.DynamicTableButton)">
 <summary>
 Build the dictionary for this panel. If the 'repeat_for_every_record' is present and checked,
 The dictionaries for each button will be merged into one dictionary so that all items
 will appear in a entry of the database.
 </summary>
</member>
<member name="M:VideoMiner.DynamicTableButtonPanel.EnableDefineAllButton">
 <summary>
 Allow the 'Define All' button to be pressed
 </summary>
</member>
<member name="M:VideoMiner.DynamicTableButtonPanel.DisableDefineAllButton">
 <summary>
 Do not allow the 'Define All' button to be pressed
 </summary>
</member>
<member name="M:VideoMiner.DynamicTableButtonPanel.DefineAll(System.Object,System.EventArgs)">
 <summary>
 When user clicks the 'DEFINE ALL' button, it is the same as if they clicked all the dynamic buttons in sequence.
 This is a convinience button. The windows are opened in reverse order so that they will be in the correct order
 from top to bottom.
 </summary>
</member>
<member name="M:VideoMiner.DynamicTableButtonPanel.DisableEnableButtons(System.Object,System.EventArgs)">
 <summary>
 Disable or Enable everything on the panel
 </summary>
</member>
<member name="M:VideoMiner.DynamicTableButtonPanel.button_CheckForDirtyDataEvent(System.Object,System.EventArgs)">
 <summary>
 If a DynamicButton is pressed, this will send that DynamicButton object as an argument to the event
 </summary>
 <param name="sender">The DynamicButton that was pressed</param>
</member>
<member name="M:VideoMiner.DynamicTableButtonPanel.ClickButton(System.String)">
 <summary>
 The dynamic button with the text 'str' will be clicked programmatically.
 This is so that when keyboard shortcuts are used in the main Videominer form,
 the correct button will be clicked causing the cascading events which lead to
 correct entry into the database.
 </summary>
 <param name="str"></param>
</member>
<member name="M:VideoMiner.DynamicTableButtonPanel.startDataEntryEventHandler(System.Object,System.EventArgs)">
 <summary>
 Tell parent that data entry has started
 </summary>
 <param name="sender">The DynamicTableButton that was pressed</param>
</member>
<member name="M:VideoMiner.DynamicTableButtonPanel.endDataEntryEventHandler(System.Object,System.EventArgs)">
 <summary>
 Tell parent that data entry has ended
 </summary>
 <param name="sender">The DynamicTableButton that was pressed</param>
</member>
<member name="M:VideoMiner.DynamicTableButtonPanel.repeatForEveryRecordHandler">
 <summary>
 Handles the checking/unchecking of the repeat control. The dictionary will be built so that
 it is in the correct formation if the main form requests it for data entry.
 </summary>
</member>
<member name="M:VideoMiner.DynamicTableButtonPanel.dataEntryCanceledHandler(System.Object,System.EventArgs)">
 <summary>
 Bubbles the DataEntrytCanceledEvent up so that video can be set to play again when the user decides to cancel data entry.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="P:VideoMiner.frmAbundanceTableView.SelectedCode">
 <summary>
 If a row is selected, return the first cell's value from that row.
 If no row is selected, return the empty string.
 </summary>
</member>
<member name="P:VideoMiner.frmAbundanceTableView.SelectedCodeName">
 <summary>
 If a row is selected, return the second cell's value from that row
 If no row is selected, return the empty string.
 </summary>
</member>
<member name="P:VideoMiner.frmAbundanceTableView.Comment">
 <summary>
 Return the contents of the comment box, which may be an empty string.
 </summary>
</member>
<member name="E:VideoMiner.frmAbundanceTableView.DataChanged">
 <summary>
 Tell the parent that the data have changed
 </summary>
</member>
<member name="M:VideoMiner.frmAbundanceTableView.ResizeGrid">
 <summary>
 Once the form loads, resize the grid so that there is no horizontal scrollbar
 </summary>
</member>
<member name="M:VideoMiner.frmAbundanceTableView.frmTableView_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary>
 Capture the press of the 'X' button and hide instead of closing to avoid an exception on re-opening
 </summary>
</member>
<member name="F:VideoMiner.frmAddButton.m_table_name">
 <summary>
 The name of the table which this form represents, either
 videominer_habitat_buttons or videominer_transect_buttons
 </summary>
</member>
<member name="F:VideoMiner.frmAddButton.m_data_table">
 <summary>
 The data table containing the contents of the table given by m_table_name
 </summary>
</member>
<member name="F:VideoMiner.frmAddButton.m_lookup_table_name">
 <summary>
 The name of the table that was selected in the combobox by the user
 </summary>
</member>
<member name="M:VideoMiner.frmAddButton.cboTables_DrawItem(System.Object,System.Windows.Forms.DrawItemEventArgs)">
 <summary>
 Allows the drawing of each item in the combobox to be controlled.
 This is to make the 'Create New' item italicized and green.
 </summary>
</member>
<member name="M:VideoMiner.frmAddButton.addButton">
 <summary>
 Make several queries to the database to add the button according to the specs on the form.
 </summary>
</member>
<member name="M:VideoMiner.frmAddButton.cmdCreateNewTable">
 <summary>
 Handles the user's click of the Create New... selection in the combobox
 </summary>
</member>
<member name="F:VideoMiner.frmConfigureButtons.m_table_name">
 <summary>
 The name of the table which this form represents, either
 videominer_habitat_buttons or videominer_transect_buttons
 </summary>
</member>
<member name="F:VideoMiner.frmConfigureButtons.m_data_table">
 <summary>
 The data table containing the contents of the table given by m_table_name
 </summary>
</member>
<member name="M:VideoMiner.frmConfigureButtons.#ctor(System.String,System.String)">
 <summary>
 Initialize the query, and extract the data that query defines into a DataSet with corresponding DataTable.
 Populate the list and set up list attributes.
 </summary>
</member>
<member name="M:VideoMiner.frmConfigureButtons.moveToPanel">
 <summary>
 Selected rows will be moved to the other panel.
 </summary>
</member>
<member name="M:VideoMiner.frmConfigureButtons.btnMoveToPanel_Click(System.Object,System.EventArgs)">
 <summary>
 Clicking this button results in the selected rows being moved to the other panel.
 The database will also have the entries moved from one button table to the other.
 </summary>
</member>
<member name="M:VideoMiner.frmConfigureButtons.m_grd_CellClick">
 <summary>
 Set the MoveToPanel button to be enabled or disabled depending on whether or not
 the DataGridView has selected row(s)
 </summary>
</member>
<member name="M:VideoMiner.frmConfigureButtons.btnOK_Click(System.Object,System.EventArgs)">
 <summary>
 Fire an event if there have been modifications so that the parent can redraw the buttons.
 </summary>
</member>
<member name="M:VideoMiner.frmConfigureButtons.setSynced">
 <summary>
 Set the buttons to indicate that the data are synced with the database
 </summary>
</member>
<member name="M:VideoMiner.frmConfigureButtons.setUnSynced">
 <summary>
 Set the buttons to indicate that the data are unsynced with the database
 </summary>
</member>
<member name="M:VideoMiner.frmCreateKeyboardShortcut.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
 <summary>
 Allows the Enter key to be used to submit the keyboard shortcut to the database instead
 of requiring the user press the OK button. Any other keypresses are passed down for the
 KyDown event to catch.
 </summary>
 <param name="msg"></param>
 <param name="keyData"></param>
 <returns></returns>
</member>
<member name="M:VideoMiner.frmCreateKeyboardShortcut.frmCreateKeyboardShortcut_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 Read user keypresses, and show them in the textbox.
 </summary>
 <param name="sender">Object</param>
 <param name="e">KeyEventArgs</param>
</member>
<member name="M:VideoMiner.frmCreateKeyboardShortcut.assignShortcut">
 <summary>
 Record the keyboard shortcut in the database. If it already exists in the database,
 inform user and go back to 'waiting for input' mode.
 </summary>
</member>
<member name="F:VideoMiner.frmEditLookupTable.m_data_row">
 <summary>
 A newly added datarow. Used when user presses the 'Add Record' button
 </summary>
</member>
<member name="T:VideoMiner.frmEditLookupTable.CommandType">
 <summary>
 An enumeration for the type of query to be executed
 Update is when a record that exists is to be modified
 Insert is when a new row is to be added to the table
 Delete is when a row which exists is to be removed from the table.
 </summary>
</member>
<member name="M:VideoMiner.frmEditLookupTable.grdEditTable_DataBindingComplete(System.Object,System.EventArgs)">
 <summary>
 Remove the Primary Key column from the view, so that users cannot change it
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:VideoMiner.frmKeyboardCommands.frmKeyboardCommands_Activated(System.Object,System.EventArgs)">
 <summary>
 Fetch the data from the database for the species buttons table, ordered by drawing order,
 and add the Button text and keyboard shortcuts to the list as columns.
 </summary>
</member>
<member name="M:VideoMiner.frmKeyboardCommands.cmdAssignShortcut_Click(System.Object,System.EventArgs)">
 <summary>
 Brings up a dialog box where you can add, edit, or delete a keyboard shortcut for a species.
 </summary>
</member>
<member name="M:VideoMiner.frmProjectNames.getProjectName">
 <summary>
 Return the name of the currently chosen project name
 </summary>
</member>
<member name="M:VideoMiner.frmProjectNames.getProjectNameToDelete">
 <summary>
 Return the name of the currently chosen project name to be deleted
 </summary>
</member>
<member name="M:VideoMiner.frmProjectNames.PopulateProjectList(Microsoft.VisualBasic.Collection)">
 <summary>
 Place all names in the supplied list Collection into the ListBox.
 Refreshes the list everytime it is called, i.e. clears the list and rebuilds
 it based on the list Collection
 </summary>
</member>
<member name="M:VideoMiner.frmProjectNames.lstProjects_SelectedIndexChanged(System.Object,System.EventArgs)">
 <summary>
 Enable or disable the delete button depending on whether or not there is a valid selection
 </summary>
</member>
<member name="M:VideoMiner.frmProjectNames.txtProject_TextChanged(System.Object,System.EventArgs)">
 <summary>
 Enable or disable the delete button depending on whether or not there is a valid selection
 </summary>
</member>
<member name="F:VideoMiner.frmRareSpeciesLookup.m_species_table">
 <summary>
 Holds the data from queries issued to the database
 </summary>
</member>
<member name="F:VideoMiner.frmRareSpeciesLookup.m_speciesName">
 <summary>
 The currently selected species name
 </summary>
</member>
<member name="F:VideoMiner.frmRareSpeciesLookup.m_speciesScienceName">
 <summary>
 The currently selected species scientific name
 </summary>
</member>
<member name="F:VideoMiner.frmRareSpeciesLookup.m_speciesCode">
 <summary>
 The currently selected species code
 </summary>
</member>
<member name="F:VideoMiner.frmRareSpeciesLookup.m_speciesTaxCode">
 <summary>
 The currently selected species' taxonomic level code
 </summary>
</member>
<member name="E:VideoMiner.frmRareSpeciesLookup.EndDataEntryEvent">
 <summary>
 Fires when the data entry has completed.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="E:VideoMiner.frmRareSpeciesLookup.DataEntryCanceled">
 <summary>
 Fires when user presses Cancel or 'X' button.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="P:VideoMiner.frmRareSpeciesLookup.SpeciesName">
 <summary>
 Returns the currently selected species' common name. Will return null string if there is no selection.
 </summary>
</member>
<member name="P:VideoMiner.frmRareSpeciesLookup.SpeciesScienceName">
 <summary>
 Returns the currently selected species' scientific name. Will return null string if there is no selection.
 </summary>
</member>
<member name="P:VideoMiner.frmRareSpeciesLookup.SpeciesCode">
 <summary>
 Returns the currently selected species' species code. Will return null string if there is no selection.
 </summary>
</member>
<member name="M:VideoMiner.frmRareSpeciesLookup.PopulateComboBox(System.Windows.Forms.ComboBox@,System.Data.DataTable@)">
 <summary>
 Fill the combobox with a given column's contents
 </summary>
 <param name="cboBox">A reference to the combobox to populate</param>
 <param name="dataTable">A single column data table containing values that you want to fill the combobox with</param>
</member>
<member name="M:VideoMiner.frmRareSpeciesLookup.ClearControls">
 <summary>
 Clears out all controls of their current values and resets member variables to a freshly loaded default state.
 </summary>
</member>
<member name="M:VideoMiner.frmRareSpeciesLookup.cboCommonName_SelectionChangeCommitted(System.Object,System.EventArgs)">
 <summary>
 Whenever the selected index chages for the Common Name, set the other controls to match the Common Name.
 </summary>
</member>
<member name="M:VideoMiner.frmRareSpeciesLookup.cboScientificName_SelectionChangeCommitted(System.Object,System.EventArgs)">
 <summary>
 Whenever the selected index chages for the Common Name, set the other controls to match the Common Name.
 </summary>
</member>
<member name="M:VideoMiner.frmRareSpeciesLookup.cmdOK_Click(System.Object,System.EventArgs)">
 <summary>
 If the user has selected a species, this will fire an event telling the main form to record a record in the data table in the database.
 </summary>
</member>
<member name="M:VideoMiner.frmRareSpeciesLookup.cmdCancel_Click(System.Object,System.EventArgs)">
 <summary>
 If user presses the cancel button, just hide the form since it is modeless.
 </summary>
</member>
<member name="M:VideoMiner.frmRareSpeciesLookup.me_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary>
 Capture the event when the user presses the 'X' button top right. Instead of closing the form, just hide it.
 </summary>
</member>
<member name="M:VideoMiner.frmRareSpeciesLookup.endDataEntryHandler(System.Object,System.EventArgs)">
 <summary>
 Tell Videominer that the user wishes to submit a database record addition for the species listed.
 </summary>
</member>
<member name="M:VideoMiner.frmRareSpeciesLookup.dataEntryCanceledHandler(System.Object,System.EventArgs)">
 <summary>
 Bubbles the DataEntrytCanceledEvent up so that video can be set to play again when the user decides to cancel data entry.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="F:VideoMiner.frmSelectDataColumns.m_show_indices">
 <summary>
 An array of integers holding the data table column indices that are being shown.
 </summary>
</member>
<member name="P:VideoMiner.frmSelectDataColumns.VisibleColumns">
 <summary>
 An array of booleans, 1 for each column of the data table.
 True means the column is visible, False means it is hidden.
 </summary>
 <returns></returns>
</member>
<member name="M:VideoMiner.frmSelectDataColumns.recordVisibility">
 <summary>
 Record into array the visibility settings as set by user.
 </summary>
</member>
<member name="M:VideoMiner.frmSelectDataColumns.SetVisibleColumns(System.Boolean[])">
 <summary>
 Set the checked items to have the visibility as supplied by the argument blVis.
 Fires the DataTableModified Event
 </summary>
 <param name="blVis"></param>
</member>
<member name="M:VideoMiner.frmSelectDataColumns.me_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary>
 When the form is closed, save the changes and raise an event so that the grid can be changed in the main form.
 </summary>
</member>
<member name="E:VideoMiner.frmStringDataViewer.ShowChosenStringOnlyEvent">
 <summary>
 Signal the calling class that you want to only be sent data for whatever string was chosen in that class.
 </summary>
</member>
<member name="E:VideoMiner.frmStringDataViewer.ShowAllStringsEvent">
 <summary>
 Signal the calling class that you want to be sent data for all incoming NMEA strings.
 </summary>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.frmStringDataViewer.ClearText">
 <summary>
 Clear the textbox of all data.
 </summary>
</member>
<member name="M:VideoMiner.frmStringDataViewer.AppendString(System.String)">
 <summary>
 Append the string to the textbox
 </summary>
 <remarks>Only appends if the form is visible and not "paused"</remarks>
</member>
<member name="T:VideoMiner.VideoMiner">
 <summary>
 This is the main form for the program. Once launched, and an Open Database commend is issued,
 the dynamic panels representing the 3 panels TRANSECT, HABITAT, and SPECIES will be loaded. Each of these
 in turn load arrays of objects DynamicButton for SPECIES and DynamicTableButton for TRANSECT and HABITAT.
 The Database module holds a global instance of the database so that it is consolidated for all forms.
 
 </summary>
</member>
<member name="F:VideoMiner.VideoMiner.m_strWorkingPath">
 <summary>
 The working directory of the software
 </summary>
</member>
<member name="F:VideoMiner.VideoMiner.m_strConfigFilePath">
 <summary>
 The configuration directory for the software
 </summary>
 <remarks>This will be the directory given by (m_strWorkingPath)\Config</remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_strConfigFile">
 <summary>
 The full path for the configuration file
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_strDatabasePath">
 <summary>
 Holds the last known database path as entered by the user in the OpenFileDialog
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_strDatabaseFilePath">
 <summary>
 Holds the full path filename as entered by the user in the OpenFileDialog
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_strVideoPath">
 <summary>
 Holds the last known video file path as entered by the user in the OpenFileDialog
 Does not hold the filename itself
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_strVideoFile">
 <summary>
 Hold the currently loaded video's filename without path information
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_strImagePath">
 <summary>
 Holds the path of the last known path for pictures.
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_strSessionPath">
 <summary>
 Holds the path of the last known session's path as entered by the user in the OpenFileDialog.
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_tsUserTime">
 <summary>
 Holds the user time as set by the m_frmSetTime form.
 This is the master time object to be used by all functions when data are recorded.
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_GPS_X">
 <summary>
 Holds the GPS X value (latitude). If a GPS device is not connected, this will be a default
 value as set in the load function for this form.
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_GPS_Y">
 <summary>
 Holds the GPS Y value (longitude). If a GPS device is not connected, this will be a default
 value as set in the load function for this form.
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_GPS_Z">
 <summary>
 Holds the GPS Z value (elevation). If a GPS device is not connected, or the NMEA sting
 does not support elevation, this will be a default value as set in the load function for this form.
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_project_name">
 <summary>
 Name of the current project
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_transect_name">
 <summary>
 Name of the current transect
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_transect_date">
 <summary>
 Date for the current transect
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_video_file_open">
 <summary>
 Is there a video file currently open or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_dblVideoRate">
 <summary>
 Relative rate at which to play the video. 1=regular speed.
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_blInTransect">
 <summary>
 Are we in a transect currently or not?
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.VideoMiner.m_data_table">
 <summary>
 Holds the data table for the actual project data being recorded
 </summary>
</member>
<member name="F:VideoMiner.VideoMiner.m_data_codes_table">
 <summary>
 Holds the data code table for the project. This will be passed to the various DynamicPanels
 so that they can link their data to the proper data code
 </summary>
</member>
<member name="F:VideoMiner.VideoMiner.m_was_playing">
 <summary>
 Used to store the state of the video when a data entry button is clicked.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.frmVideoMiner_Load(System.Object,System.EventArgs)">
 <summary>
 Get version name from assembly, read and process the Config file, and setup the form controls for an unloaded state.
 </summary>
 <param name="sender">System.Object</param>
 <param name="e">System.EventArgs</param>
 <remarks> From MSDN for Windows.Forms.Control.CheckForIllegalCrossThreadCalls:
 When a thread other than the creating thread of a control tries to access one of that control's methods or properties,
 it often leads to unpredictable results. A common invalid thread activity is a call on the wrong thread that accesses
 the Control 's Handle property. Set CheckForIllegalCrossThreadCalls to true to find and diagnose this thread activity
 more easily while debugging. </remarks>
</member>
<member name="M:VideoMiner.VideoMiner.loadConfigurationFile">
 <summary>
 Load the metadata found in the VideoMiner configuration file into member variables.
 If the configuration file is not found, defaults will be assigned for GPS settings
 and the path variables.
 </summary>
 <returns>True if all member variables were populated. False if an exceptioon was thrown or the file does not exist</returns>
</member>
<member name="M:VideoMiner.VideoMiner.SaveConfiguration(System.String,System.String,System.Boolean)">
 <summary>
 Save a single variable's value to the XML configuration file. If the variable does not exist,
 a new node, and any parent nodes which are required will be added to the XML document.
 If forceCreate is true, the node will be created even if one with the same name already exists.
 This makes dynamic lists possible.
 </summary>
 <param name="xPath">An XPath String representing the XML node name</param>
 <param name="strValue">The value to save in the node represented by xPath</param>
 <returns>A Boolean representing success or failure</returns>
</member>
<member name="M:VideoMiner.VideoMiner.testSaveConfiguration">
 <summary>
 Test for SaveConfiguration function. Can be deleted once project complete.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.DeleteXMLNode(System.String,System.String)">
 <summary>
 Delete a node represented by the string 'xPath'
 eg. if xPath = "X/Y/Z", the function will delete the node Z.
 </summary>
 <param name="xPath">An XPath String representing the node tag you wish to delete</param>
 <param name="strValue">The value to delete. There can be more than one node with the same tag, so this is required to diferrentiate.</param>
 <remarks>xPath is a "/" seperated string where "/" represents node breaks.
 i.e. "X/Y/Z" represents X is parent of Y, Y is parent of Z and Z is the node to delete, as long as it has
 value equal to strValue</remarks>
</member>
<member name="M:VideoMiner.VideoMiner.CreateXMLNode(System.Xml.XmlDocument@,System.Xml.XmlElement@,System.String,System.String,System.String)">
 <summary>
 Recursively create a node and any required parent nodes represented by the string 'xPath'
 eg. if xPath = "X/Y/Z", the function will insert a node with parents if necessary X->Y->Z
 where "Z" is the base case and assumed to be the innerText of the child node.
 </summary>
 <param name="docNode">A reference to an XmlDocument root node</param>
 <param name="node">A reference to a parent to add a new node to. If Nothing, assume docNode is the parent</param>
 <param name="xPath">An XPath String representing the node you wish to add</param>
 <param name="strValue">String representing the value to set the variable to</param>
 <param name="leftPath">String representing the xPath to the left of the current node</param>
 <remarks>xPath is a "/" seperated string where "/" represents node breaks.
 i.e. "X/Y/Z" represents X is parent of Y, Y is parent of Z and Z is the variable with a value to set</remarks>
</member>
<member name="M:VideoMiner.VideoMiner.GetConfiguration(System.String)">
 <summary>
 Get a single variable's value for a given node from the XML configuration file.
 </summary>
 <param name="xPath">An XPath String representing the XML node name, with children seperated by "/"</param>
 <returns>A String, the value of the requested XML node</returns>
</member>
<member name="M:VideoMiner.VideoMiner.GetDataColumnVisibilityConfiguration">
 <summary>
 Retrieve the DataColumnVisibility values from the XML configuration file.
 </summary>
 <returns>An array of booleans or Nothing if DataColumnVisibility is not found in the XML file</returns>
</member>
<member name="M:VideoMiner.VideoMiner.GetConfigurationCollection(System.String)">
 <summary>
 Get a collection of variables values for a given node from the XML configuration file.
 </summary>
 <param name="xPath">An XPath String representing the XML node name, with children seperated by "/"</param>
 <returns>A Collection containing the children's values for the requested XML node</returns>
</member>
<member name="M:VideoMiner.VideoMiner.VideoMiner_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 Handles the keyboard shortcuts from the main Videominer window.
 </summary>
 <param name="e">The key that was pressed</param>
</member>
<member name="M:VideoMiner.VideoMiner.mnuOpenSession_Click(System.Object,System.EventArgs)">
 <summary>
 When user selects "Open Session" from the file menu, sub openSession() and open a dialogue
 where the user can restore a previous session that was being run in the program via a VideoMiner Session file.
 This restores the last video that was being played.
 </summary>
 <param name="sender">System.Object</param>
 <param name="e">System.EventArgs</param>
</member>
<member name="M:VideoMiner.VideoMiner.mnuSaveSession_Click(System.Object,System.EventArgs)">
 <summary>
 sub saveSession() when the user selects Save Session from the file menu, and open a dialogue
 where the user can save the current VideoMiner Session file. This saves which video is currently being played.
 </summary>
 <param name="sender">System.Object</param>
 <param name="e">System.EventArgs</param>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.VideoMiner.mnuSaveSessionAs_Click(System.Object,System.EventArgs)">
 <summary>
 sub saveSessionAs() and open a dialogue where the user can save the current state
 that is being run in the program as a new VideoMiner Session file.
 This saves which video is currently being played.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:VideoMiner.VideoMiner.mnuAbout_Click(System.Object,System.EventArgs)">
 <summary>
 When a user selects about from the menu bar, display the ABOUT message by opening the AboutBox1 form
 </summary>
 <param name="sender">System.Object</param>
 <param name="e">System.EventArgs</param>
</member>
<member name="M:VideoMiner.VideoMiner.mnuOpenDatabase_Click(System.Object,System.EventArgs)">
 <summary>
 When the user clicks "Open Database" in the file menu, open a dialog box where a database can be selected
 and opened for use in the program.
 Load OpenFileDialog object to prompt user to select a database to open.
 When the user clicks OK, sub openDatabase and send it the path of the database to open.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.CloseDatabase_Click(System.Object,System.EventArgs)">
 <summary>
 When the user clicks "Close Database" in the file menu, close the currently open database.
 </summary>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.VideoMiner.mnuOpenDV_Click(System.Object,System.EventArgs)">
 <summary>
 When a user selects "Open a DV Device" from the file menu, the openDV() function to
 see a dialogue where the user can open a DV file.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.cmdShowSetTimecode_Click(System.Object,System.EventArgs)">
 <summary>
 Ask user to input time that is shown on the video. This synchronizes the program with the video, and sets the label to the correct time.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.VideoMiner.TransectStart_Click(System.Object,System.EventArgs)">
 <summary>
 This handler is called when the user clicks on the "Transect Start" button.
 Pauses video, prompts user for a transect name, inserts new record in the DataGridView1
 database table, and plays the video again.
 Also inserts a record for On or Off bottom. If the transect is starting, On bottom will be recorded
 If the transect is ending, Off bottom will be recorded.
 </summary>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.VideoMiner.OffBottom_Click(System.Object,System.EventArgs)">
 <summary>
 This event is called when the user clicks on the "Off Bottom" button.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:VideoMiner.VideoMiner.runInsertQueryScreenshot(System.String)">
 <summary>
 Build a dictionary and run an insert query for a screenshot event. The Habitat and Transect panels' data will be merged into the dictionary prior to insertion.
 </summary>
 <param name="filename">The name of the file the screenshot was captured to</param>
</member>
<member name="M:VideoMiner.VideoMiner.dataChanged(System.Object,System.EventArgs)">
 <summary>
 Handle the entry of data by creating an insert query and
 saving to the database.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.cmdEdit_Click(System.Object,System.EventArgs)">
 <summary>
 Brings up the edit species dialog (m_frmSpeciesList) which allows the user to change the order of the species buttons
 and to delete them, edit them, or add new ones.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.speciesButtonsChanged">
 <summary>
 When the user has changed the species buttons from the m_frmSpeciesEvent form, this function will remove and re-add the DynamicPanel
 which contains the species buttons.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.capture_screen_image">
 <summary>
 Capture a screenshot of the video at it's current position, and write a transection to the database.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.newProjectName">
 <summary>
 Add a new project name to the XML file when the user changes it inside frmProjectNames
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.project_name_changed">
 <summary>
 Change the project name to what was chosen in the frmProjectName form.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.project_name_delete">
 <summary>
 Delete the project name currently selected in the frmProjectName form.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.openSession">
 <summary>
 Open a session which has saved the previous state of the program in VideoMiner Session file (*.xml)
 This will open the video that was being played when the session was saved.
 </summary>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.VideoMiner.saveSession">
 <summary>
 Save the session, i.e. which database and which video and the video's position
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.Save_XmlSettings(System.String,System.String)">
 <summary>
 Function to save the XML settings to a file
 </summary>
 <param name="strPath"></param>
 <param name="strValue"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.VideoMiner.get_rel_filename(System.String)">
 <summary>
 Returns the filename without its path
 </summary>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.VideoMiner.no_files_loaded">
 <summary>
 Disables buttons on main form when no file is loaded to prevent users from launching
  functions while no database file is open.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.database_is_open_toggle_visibility">
 <summary>
 Once the database is open, toggle the buttons depending on the video file status
 </summary>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.VideoMiner.files_loaded">
 <summary>
 Toggle enabled/disabled for: Set Time Code Button, Transect Start Button, On/Off Bottom Button, Resume Video Button
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.toggle_bottom">
 <summary>
 Change text in OnOffBottomTextbox and on OffBottom button between "Off Bottom" and "On Bottom", and
 insert a record in the database to reflect this change.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.mnuOpenImg_Click(System.Object,System.EventArgs)">
 <summary>
 Open an image.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.openImage">
 <summary>
 Open an image. Creates a new instance of m_frmImage. Greys out the video menu
 as we should only have either video or image open, not both.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.mnuOpenFile_Click(System.Object,System.EventArgs)">
 <summary>
 Handles the menu click event for the opening of a video file
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:VideoMiner.VideoMiner.openVideo">
 <summary>
 Open a video file. Creates a new instance of m_frmVideoPlayer
 </summary>
 <returns>Boolean representing success</returns>
 <remarks>Returns True if the user chose an existing file to play, False is they pressed cancel or clicked the 'X'</remarks>
</member>
<member name="M:VideoMiner.VideoMiner.video_file_unload">
 <summary>
 When the video file is closed, change labels and timecodes to reflect the closure
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.playVideo">
 <summary>
 Tell the video player to play the video
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.pauseVideo">
 <summary>
 Tell the video player to pause the video
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.stopVideo">
 <summary>
 Tell the video player to stop the video
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.playerPaused">
 <summary>
 If the video player is paused, show the play icon and set some variables
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.playerPlaying">
 <summary>
 If the video player is playing, show the pause icon and set some variables
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.playerStopped">
 <summary>
 If the video player is stopped, show the play icon and set some variables
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.timerTick">
 <summary>
 Updates the time text on the form everytime the timer tick event is issued by the frmVideoPlayer form
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.closeDatabase">
 <summary>
 Closes the MS Access database, and resets all controls to the unloaded state.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.openDatabase">
 <summary>
 Opens the MS Access database and fills the DynamicPanels with buttons. Set up visibility on other VideoMiner buttons
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.runInsertQuery(System.Collections.Generic.Dictionary{System.String,System.Tuple{System.String,System.String,System.Boolean}})">
 <summary>
 Creates and runs an 'INSERT INTO' query on the database for all of the given items in the dictionary.
 Each item will be incorporated into a single query for insertion.
 </summary>
 <param name="dictTransect">A Dictionary object of Key/Value pairs where the keys are field names
 as found in the main 'data' table in the database, and the values are a pair of codes, the first
 one being the data code for the field being recorded to in the 'data' table and the second being
 the data code itself as chosen by the user.</param>
</member>
<member name="M:VideoMiner.VideoMiner.dataEntryStarted">
 <summary>
 Used to pause the video if data entry has started.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.dataEntryEnded">
 <summary>
 Used to play the video if data entry has ended.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.cmdRareSpeciesLookup_Click(System.Object,System.EventArgs)">
 <summary>
 For looking up and saving to the database a rare species (one not on the species buttons).
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.m_frmConfigureButtons_DatabaseModifiedHandler">
 <summary>
 The habitat and/or transect buttons in the database have been modified and need to be redrawn.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.setTimes">
 <summary>
 Set the User time (txtTime) textbox and source time (txtTimeSource) to show
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.unsetTimes">
 <summary>
 Set the user time (txtTime) textbox and source time textbox (txtTimeSource) to dissappear
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.time_changed">
 <summary>
 Gets the new user defined time from the set time form and call setUserTime to apply
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.gps_disconnected">
 <summary>
 Handles the GPS disconnection. Location data are reset and the SetTime form is set up to be Video time instead.
 </summary>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.VideoMiner.save_GPS_configuration">
 <summary>
 Updates all GPS member variables for settings and saves the configuration for all of them (xml file)
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.RefreshGPSStatus">
 <summary>
 Refresh the member variables and labels to reflect when the the GPS data changes. 
 </summary>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.VideoMiner.m_frmSetTime_RequestGPS">
 <summary>
 The Set Time form will request GPS time, and this function handles that
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.m_frmSetTime_TimeSourceChanged">
 <summary>
 Handles an event to grab the time from the m_frmSetTime form.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.m_frmGpsSettings_DataChanged">
 <summary>
 Handles an event to grab the latest data from the GPS device.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.UnHandledHandler(System.Object,System.UnhandledExceptionEventArgs)">
 <summary>
 Handle everything not handled by .NET handlers. This will catch crossthread exceptions as well.
 Important as it gives a message about the error and the stack trace at the time the exception was thrown.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.Me_Closing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary>
 When the user clicks the X to close the application, this handles that and closes any open forms and sets them up for garbage collection
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.txtQuickSpeciesCount_TextChanged(System.Object,System.EventArgs)">
 <summary>
 When the user changes the quick entry value, set all species buttons to have that value.
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.dataEntryCanceledHandler(System.Object,System.EventArgs)">
 <summary>
 Handles the DataEntrytCanceledEvent up so that video can be set to play again when the user decides to cancel data entry.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:VideoMiner.VideoMiner.mnuShowTooltips_Click(System.Object,System.EventArgs)">
 <summary>
 Toggle Tooltip visibility
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.DataTableColumnsToolStripMenuItem_Click(System.Object,System.EventArgs)">
 <summary>
 Select the data table columns to show. This changes the select query used to populate the grid
 </summary>
</member>
<member name="M:VideoMiner.VideoMiner.DataTableModified">
 <summary>
 Change the visibility of the datbase table columns for the main data table.
 Also, save the configuration so it doesn't have to be done every time the app is opened.
 </summary>
</member>
<member name="T:VideoMiner.frmEditSpecies">
 <summary>
 This form class allows the user to add a new species to the database table 'videominer_species_buttons' or to edit properties of an existing species
 </summary>
</member>
<member name="F:VideoMiner.frmEditSpecies.m_speciesName">
 <summary>
 The currently selected species name
 </summary>
</member>
<member name="F:VideoMiner.frmEditSpecies.m_speciesScienceName">
 <summary>
 The currently selected species scientific name
 </summary>
</member>
<member name="F:VideoMiner.frmEditSpecies.m_speciesCode">
 <summary>
 The currently selected species code
 </summary>
</member>
<member name="F:VideoMiner.frmEditSpecies.m_speciesTaxCode">
 <summary>
 The currently selected species' taxonomic level code
 </summary>
</member>
<member name="F:VideoMiner.frmEditSpecies.m_buttonColor">
 <summary>
 The currently selected button color
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.frmEditSpecies.m_button_text">
 <summary>
 The button text to be used for the species code
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.frmEditSpecies.m_keyboard_shortcut">
 <summary>
 The text representing a .NET keyboard shortcut
 </summary>
 <remarks></remarks>
</member>
<member name="E:VideoMiner.frmEditSpecies.DataEntryCanceled">
 <summary>
 Fires when user presses Cancel or 'X' button.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="P:VideoMiner.frmEditSpecies.SpeciesName">
 <summary>
 Returns the currently selected species' common name. Will return null string if there is no selection.
 </summary>
</member>
<member name="P:VideoMiner.frmEditSpecies.SpeciesScienceName">
 <summary>
 Returns the currently selected species' scientific name. Will return null string if there is no selection.
 </summary>
</member>
<member name="P:VideoMiner.frmEditSpecies.SpeciesCode">
 <summary>
 Returns the currently selected species' species code. Will return null string if there is no selection.
 </summary>
</member>
<member name="P:VideoMiner.frmEditSpecies.SpeciesTaxCode">
 <summary>
 Returns the currently selected species' taxonomy family code. Will return null string if there is no selection.
 </summary>
</member>
<member name="P:VideoMiner.frmEditSpecies.ButtonColor">
 <summary>
 Returns the currently selected button color. Will return null string if there is no selection.
 </summary>
</member>
<member name="P:VideoMiner.frmEditSpecies.ButtonText">
 <summary>
 Returns the currently selected button color. Will return null string if there is no selection.
 </summary>
</member>
<member name="P:VideoMiner.frmEditSpecies.KeyboardShortcut">
 <summary>
 Returns a text representation of the current keyboard shortcut for this species. Will return null string if there isn't one set up.
 </summary>
</member>
<member name="M:VideoMiner.frmEditSpecies.#ctor">
 <summary>
 In this constructor, the various comboboxes will be populated so that it only happens once. There are over 7000 records in the species table and this will speed things up in the program.
 </summary>
</member>
<member name="M:VideoMiner.frmEditSpecies.PopulateComboBox(System.Windows.Forms.ComboBox@,System.Data.DataTable@)">
 <summary>
 Fill the combobox with a given column's contents
 </summary>
 <param name="cboBox">A reference to the combobox to populate</param>
 <param name="dataTable">A single column data table containing values that you want to fill the combobox with</param>
</member>
<member name="M:VideoMiner.frmEditSpecies.cboButtonColors_DrawItem(System.Object,System.Windows.Forms.DrawItemEventArgs)">
 <summary>
 Custom draw function for the button colors combobox so that the color names appear as the colors themselves.
 </summary>
</member>
<member name="M:VideoMiner.frmEditSpecies.cmdOk_Click(System.Object,System.EventArgs)">
 <summary>
 When user presses OK, either add a new record to the database table videominer_species_buttons or change one already present.
 </summary>
</member>
<member name="M:VideoMiner.frmEditSpecies.GetNextSequenceId">
 <summary>
 Get the next unique ID from the species buttons table so that the new button can be inserted properly into the database table.
 </summary>
</member>
<member name="M:VideoMiner.frmEditSpecies.cboCommonName_SelectionChangeCommitted(System.Object,System.EventArgs)">
 <summary>
 Whenever the selected index chages for the Common Name, set the other controls to match the Common Name.
 </summary>
</member>
<member name="M:VideoMiner.frmEditSpecies.cboScientificName_SelectionChangeCommitted(System.Object,System.EventArgs)">
 <summary>
 Whenever the selected index chages for the Common Name, set the other controls to match the Common Name.
 </summary>
</member>
<member name="M:VideoMiner.frmEditSpecies.cboButtonColor_SelectionChangeCommitted(System.Object,System.EventArgs)">
 <summary>
 Handles the case when the user changes the selection in the Button Colors combobox. Simply sets a member variable when changed.
 If the selection is null, DarkSlateGray will be used as the default
 </summary>
</member>
<member name="M:VideoMiner.frmEditSpecies.FillControlsUsingSpeciesCode">
 <summary>
 Fills the controls based on the current species code. Usually used from a parent form when it wants to populate the fields automatically with a supplied
 species code value.
 </summary>
</member>
<member name="M:VideoMiner.frmEditSpecies.ClearControls">
 <summary>
 Clears out all controls of their current values and resets member variables to a freshly loaded default state.
 </summary>
</member>
<member name="M:VideoMiner.frmEditSpecies.me_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary>
 Capture the event when the user presses the 'X' button top right. Instead of closing the form, just hide it.
 </summary>
</member>
<member name="M:VideoMiner.frmEditSpecies.txtSpeciesBtnTxt_TextChanged(System.Object,System.EventArgs)">
 <summary>
 If the user types custom text into the button text texbox, this handles that and sets the appropriate member variable.
 </summary>
</member>
<member name="T:VideoMiner.frmGpsSettings">
 <summary>
 Form for connecting a GPS device to a serial port.
 </summary>
 <remarks>Many things can happen with serial ports, the user can unplug their device suddenly, turn the data-sending off, change some setting
 on the device itself, turn off the device. This class attempts to account for all of these situations by constantly checking data
 values and refreshing the status. The RefreshStatus function refreshes all controls to match what the serial port is doing and
 also raises the events 'GPSConnectedEvent' and 'GPSDisconnectedEvent'.</remarks>
</member>
<member name="F:VideoMiner.frmGpsSettings.GPS_TIMEOUT">
 <summary>
 Default timeout value used in form load event
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.TIMEOUT_DEFAULT">
 <summary>
 Value of default connection and read timeout in seconds
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_intSearchingCounter">
 <summary>
 Counter to keep track of timer ticks during connection attempt. Connection timeout counter.
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_lngConnectedCounter">
 <summary>
 Counter to keep track of timer ticks for data received, used to make sure the data keep coming in once a connectioin is established
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_tsLastTimeDataReceived">
 <summary>
 The date and time of the last data received. Used with m_lngConnectedCounter to figure out if the connection has been terminated.
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings._m_spSerialPort">
 <summary>
 The serial port object, withevents so we can handle the DataReceived event
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_strComPort">
 <summary>
 Name of the COM port, eg. "COM1"
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_strNMEAStringType">
 <summary>
 The NMEA string to use for data filtering, eg. "GPGGA"
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_strParity">
 <summary>
 Parity value for the serial port connection, eg. "NONE"
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_intBaudRate">
 <summary>
 Baud rate for the serial port connection, eg. 4800
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_dblStopBits">
 <summary>
 Stop bits for the serial port connection, eg. 1.5
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_intDataBits">
 <summary>
 Data bits for the serial port connection, eg. 8
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_intTimeout">
 <summary>
 Timeout in seconds for the serial port connection
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_blSendChosenStringsOnly">
 <summary>
 If true, only the chosen NMEA strings will be sent to the data viewer form. If false, all incoming NMEA strings will be sent.
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_blFirstTimeConnected">
 <summary>
 Because the connected variable is set everytime good data are received, this is required to keep track of the
 first time it is connected. This allows the form to raise a GPSConnected event one time only,
 upon connection.
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_blConnected">
 <summary>
 True if the GPS data of the given NMEA string are being received, false otherwise
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_dblGPSX">
 <summary>
 GPS X value (latitude) in the format DDMM.MMMM
 </summary>
 <remarks>D=Degrees, M=Minutes</remarks>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_dblGPSY">
 <summary>
 GPS Y value (longitude) in the format DDMM.MMMM
 </summary>
 <remarks>D=Degrees, M=Minutes</remarks>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_dblGPSZ">
 <summary>
 GPS Z value (elevation) in meters
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_dblGPSTime">
 <summary>
 GPS time value in the format HHMMSS
 </summary>
 <remarks>H=Hour, M=Minute, S=Second</remarks>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_tsGPSTime">
 <summary>
 GPS time value as a TimeSpan object
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_strCurrData">
 <summary>
 A string which holds the most recent good data, which means data that matched the NMEA string requested
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_blDataGood">
 <summary>
 True if m_strCurrData is good, that is if it is good and the connection is still good.
 If the connection was lost for the 'timeout' period then this will be set to False
 even if m_strCurrData appears good.
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings._m_frmStringDataViewer">
 <summary>
 A form which shows the authenticated data strings in a textbox in real time
 </summary>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_tmrTimerItem">
 <summary>
 Timer for the check to make sure connectivity is maintained.
 </summary>
 <remarks>Had to be a system threading timer due to SerialPort.DataReceived being in another thread</remarks>
</member>
<member name="F:VideoMiner.frmGpsSettings.m_tmrcbTimerDelegate">
 <summary>
 Callback delegate for m_tmrTimerItem
 </summary>
</member>
<member name="P:VideoMiner.frmGpsSettings.SerialPort">
 <summary>
 Exposes the SerialPort Object
 </summary>
 <returns>SerialPort</returns>
</member>
<member name="P:VideoMiner.frmGpsSettings.ComPort">
 <summary>
 The name of the ComPort, eg "COM1", "COM2", ...
 </summary>
 <value>String</value>
 <returns>String</returns>
</member>
<member name="P:VideoMiner.frmGpsSettings.NMEAStringType">
 <summary>
 NMEA (National Marine Electronics Association) String type
 </summary>
 <value>String</value>
 <returns>String</returns>
 <remarks>This String will be like "GPGGA", "GPRMC", ...</remarks>
</member>
<member name="P:VideoMiner.frmGpsSettings.BaudRate">
 <summary>
 Baud rate for the serial port connection
 </summary>
 <value>Integer</value>
 <returns>Integer</returns>
</member>
<member name="P:VideoMiner.frmGpsSettings.Parity">
 <summary>
 Parity value for the serial port connection
 </summary>
 <value>Integer</value>
 <returns>Integer</returns>
</member>
<member name="P:VideoMiner.frmGpsSettings.ParityEnumVal">
 <summary>
 Parity enumeration value for the serial port connection
 </summary>
 <value>Parity</value>
 <returns>Parity</returns>
</member>
<member name="P:VideoMiner.frmGpsSettings.StopBits">
 <summary>
 Stop bits value for the serial port connection
 </summary>
 <value>Integer</value>
 <returns>Integer</returns>
</member>
<member name="P:VideoMiner.frmGpsSettings.StopBitsEnumVal">
 <summary>
 Stop bits enumeration for the serial port connection
 </summary>
</member>
<member name="P:VideoMiner.frmGpsSettings.DataBits">
 <summary>
 Data bits value for the serial port connection
 </summary>
 <value>Integer</value>
 <returns>Integer</returns>
</member>
<member name="P:VideoMiner.frmGpsSettings.Timeout">
 <summary>
 Length of time in seconds to timeout the connection operation
 </summary>
</member>
<member name="P:VideoMiner.frmGpsSettings.IsConnected">
 <summary>
 True if the serial port is connected, false otherwise
 </summary>
</member>
<member name="P:VideoMiner.frmGpsSettings.IsOpen">
 <summary>
 True if the Serial port is open
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="E:VideoMiner.frmGpsSettings.GPSVariablesChangedEvent">
 <summary>
 Signals that the GPS variables in the form have been changed and the caller should update their data to reflect the changes
 </summary>
 <remarks></remarks>
</member>
<member name="E:VideoMiner.frmGpsSettings.GPSConnectedEvent">
 <summary>
 Used to signal that the serial port is connected and receiveing data for the MNEA string selected
 </summary>
</member>
<member name="M:VideoMiner.frmGpsSettings.GPSConnected">
 <summary>
 Required for InvokeAction calls
 </summary>
</member>
<member name="E:VideoMiner.frmGpsSettings.GPSDisconnectedEvent">
 <summary>
 Used to signal that the serial port is not connected, so the data are not available
 </summary>
</member>
<member name="M:VideoMiner.frmGpsSettings.GPSDisconnected">
 <summary>
 Required for InvokeAction calls
 </summary>
</member>
<member name="E:VideoMiner.frmGpsSettings.ConnectingSerialPortEvent">
 <summary>
 Signal that the form is currently trying to connect to the serial port
 </summary>
</member>
<member name="E:VideoMiner.frmGpsSettings.DataChangedEvent">
 <summary>
 Signals that there are new good data ready to be retrieved
 </summary>
</member>
<member name="M:VideoMiner.frmGpsSettings.DataChanged">
 <summary>
 Required for InvokeAction calls
 </summary>
</member>
<member name="E:VideoMiner.frmGpsSettings.NoCOMPortsEvent">
 <summary>
 Signals that there are no COM ports available on this machine
 </summary>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.frmGpsSettings.#ctor(System.String,System.String,System.Int32,System.String,System.Double,System.Int32,System.Int32)">
 <summary>
 Creates a new instance of the GPS settings form.
 Adds ComboBox choices for COM Port, Baud rate, Parity, Stop bits, and Data bits
 </summary>
</member>
<member name="M:VideoMiner.frmGpsSettings.SetSerialPortVariables">
 <summary>
 Set the member variables to be what they currently are in the form selections controls.
 </summary>
</member>
<member name="M:VideoMiner.frmGpsSettings.ConnectSerialPort">
 <summary>
 Try to connect the serial port with the currently selected values on the textbox
 </summary>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.frmGpsSettings.RefreshStatus">
 <summary>
 Refresh all window controls based on connectivity of the serial port object.
 Raises the connected event. Also append the newest good data line to the
 port data viewer form.
 </summary>
 <remarks>This subroutine is thread safe. Raises the GPSConnected or GPSDisconnected events via a delegate</remarks>
</member>
<member name="M:VideoMiner.frmGpsSettings.cmdOK_Click(System.Object,System.EventArgs)">
 <summary>
 Clicking the OK button just hides the form so the connection, if working, will remain for the caller to access
 </summary>
</member>
<member name="M:VideoMiner.frmGpsSettings.cmdConnection_Click(System.Object,System.EventArgs)">
 <summary>
 Toggle to connect or disconnect the serial port
 </summary>
</member>
<member name="M:VideoMiner.frmGpsSettings.ClosePortThread">
 <summary>
 Creates a new thread to close the port because of an issue with the method
 </summary>
</member>
<member name="M:VideoMiner.frmGpsSettings.CloseSerialPort">
 <summary>
 Close the serial port and reset form member variables to reflect change
 </summary>
</member>
<member name="M:VideoMiner.frmGpsSettings.tmrGPSTimeout_Tick(System.Object,System.EventArgs)">
 <summary>
 Handles the connection timeout timer. If timeout period has expired, a ReadLine is done on the stream and
 if it is unsuccessful the port will be closed and a message issued. If it succeeds then the connection is
 assumed good.
 </summary>
</member>
<member name="M:VideoMiner.frmGpsSettings.GetData(System.String)">
 <summary>
 Checks the current data string for compliance with the chosen NMEA string
 If it is correct, the connected property will be set to true, 
 the connection timeout timer will be stopped and the data will be extracted.
 If any of the key fields (time, lat, long, elevation) are empty strings then
 set the data as bad and exit.
 </summary>
</member>
<member name="T:VideoMiner.frmGpsSettings.StateObjClass">
 <summary>
 Used to hold parameters for calls to TimerTask. 
 </summary>
</member>
<member name="M:VideoMiner.frmGpsSettings.TimerTask(System.Object)">
 <summary>
 Task to run when the threaded timer is started. The timer checks to make sure less than 'timeout' seconds has
 occurred since the last successful data grab.
 </summary>
 <param name="StateObj">The thread state class (StateObjClass)</param>
</member>
<member name="M:VideoMiner.frmGpsSettings.SerialPort_DataReceived(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
 <summary>
 Handles data coming in on the serial port. The first time this happens, the port
 will be officially "connected".
 </summary>
 <remarks>The serial port launches this event on another thread, which is why there are all the marshalled BeginInvokes in this function,
 all UI updating must be marshalled in this way or there will be unspecified behaviour (freezing/deadlocks)</remarks>
</member>
<member name="M:VideoMiner.frmGpsSettings.cmdViewPortData_Click(System.Object,System.EventArgs)">
 <summary>
 Opens a port data viewing form (frmStringDataViewer)
 </summary>
</member>
<member name="M:VideoMiner.frmGpsSettings.txtDataBits_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 Prevent non-digits from being entered in DataBits textbox
 </summary>
</member>
<member name="M:VideoMiner.frmGpsSettings.txtTimeout_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
  Prevent non-digits from being entered in Timeout textbox
 </summary>
</member>
<member name="M:VideoMiner.frmGpsSettings.DisableAll">
 <summary>
 Disables all controls on the form except the Cancel button.
 Useful when there are no com ports available
 </summary>
</member>
<member name="F:VideoMiner.frmImage.m_strImagePath">
 <summary>
 Holds the path of the last known path for pictures.
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.frmImage.m_strImageFile">
 <summary>
 Hold the currently loaded image's filename with full path information.
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.frmImage.m_lstImageFiles">
 <summary>
 A list of the image files in the same directory as the currently loaded image.
 </summary>
</member>
<member name="F:VideoMiner.frmImage.m_intLastImageIndex">
 <summary>
 The index of the last image file in the current m_lstImageFiles list.
 </summary>
</member>
<member name="F:VideoMiner.frmImage.m_intImageIndex">
 <summary>
 The index of the current image file in the current m_lstImageFiles list.
 </summary>
</member>
<member name="F:VideoMiner.frmImage.m_imageDirectoryEmpty">
 <summary>
 True if the directory sselected contains no valid images
 </summary>
</member>
<member name="F:VideoMiner.frmImage.m_dictEXIF">
 <summary>
 The dictionary of the EXIF metadata for the currently loaded image.
 </summary>
</member>
<member name="F:VideoMiner.frmImage._m_frmEXIFViewer">
 <summary>
 The form which shows the EXIF data for the currently displayed image
 </summary>
</member>
<member name="P:VideoMiner.frmImage.EXIFDictionary">
 <summary>
 A dictionary of key value pairs (String, String) for all the exif data
 associated with the currently-displayed image.
 </summary>
</member>
<member name="M:VideoMiner.frmImage.#ctor(System.String,System.String)">
 <summary>
 Set up the image file to start with and it's path.
 Sets up the indexing so that when LoadImage() is called
 everything will work without needing further error checks.
 </summary>
 <param name="strFilePath">The full path to the image</param>
 <param name="strFileName">The filename of the image without path information</param>
</member>
<member name="M:VideoMiner.frmImage.frmImage_Load(System.Object,System.EventArgs)">
 <summary>
 Load the image which was set up in the constructor.
 </summary>
</member>
<member name="M:VideoMiner.frmImage.ImageDirectoryEmptyMessage">
 <summary>
 Issues a message stating that the image directory chosen is empty
 </summary>
</member>
<member name="M:VideoMiner.frmImage.LoadImage">
 <summary>
 Loads the image found in the m_strImagePath with the name m_strImageFile.
 The previous and next buttons will be greyed out if the first or last
 files respectively are being shown.
 The filename will be placed on the title bar with the index number of the image.
 </summary>
</member>
<member name="M:VideoMiner.frmImage.btnPrev10_Click(System.Object,System.EventArgs)">
 <summary>
 Go back previous 10 pictures in the current image direcctory. If this spans the first
 picture, it will wrap back to the last photos.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:VideoMiner.frmImage.btnPrev_Click(System.Object,System.EventArgs)">
 <summary>
 Go back to the previous picture in the current image directory. If currently on the first picture,
 wrap back to last picture.
 </summary>
</member>
<member name="M:VideoMiner.frmImage.btnNext_Click(System.Object,System.EventArgs)">
 <summary>
 Go forward to the next picture in the current image directory. If currently on the last picture,
 wrap to the first picture.
 </summary>
</member>
<member name="M:VideoMiner.frmImage.btnNext10_Click(System.Object,System.EventArgs)">
 <summary>
 Go forward 10 pictures in the current image direcctory. If this spans the last
 picture, it will wrap back to the first photos.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:VideoMiner.frmImage.ZoomPictureBox1_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
 <summary>
 Write the text of how many pictures there are and which one you're currently on
 in the top left corner.
 </summary>
</member>
<member name="M:VideoMiner.frmImage.getEXIFData">
 <summary>
 Retreives the EXIF metadata from the image file given by m_strImageFile in the
 directory m_strImagePath and places the data into the dictionary m_dictEXIF.
 </summary>
</member>
<member name="M:VideoMiner.frmImage.frmImage_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 Accept function keypresses in the form. The F1-F12 keys allow quick access to images 0-11.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:VideoMiner.frmImage.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
 <summary>
 Accepts the right and left arrow keys to make moving to previous and next images easier.
 </summary>
 <param name="msg"></param>
 <param name="keyData"></param>
 <returns></returns>
</member>
<member name="T:VideoMiner.frmSetTime.WhichTimeEnum">
 <summary>
 Used to keep track of which time the m_tsUserTime variable is set to
 </summary>
</member>
<member name="F:VideoMiner.frmSetTime.m_enumWhichTime">
 <summary>
 Keeps track of which time the m_tsUserTime variabel is set to
 </summary>
</member>
<member name="F:VideoMiner.frmSetTime.m_tsUserTime">
 <summary>
 Stores the Timespan object representing the user time
 </summary>
</member>
<member name="P:VideoMiner.frmSetTime.WhichTime">
 <summary>
 One of the WhichTimeEnum enumeration values, representing which type of time is currently in use
 </summary>
</member>
<member name="P:VideoMiner.frmSetTime.UserTime">
 <summary>
 UserTime is a TimeSpan property representing the user time
 </summary>
</member>
<member name="P:VideoMiner.frmSetTime.TimeSource">
 <summary>
 The Timesource in use, one of the values in the WhichTimeEnum enumerationm
 </summary> 
</member>
<member name="E:VideoMiner.frmSetTime.TimeChanged">
 <summary>
 When the user clicks the 'OK' button this event is raised
 </summary>
</member>
<member name="E:VideoMiner.frmSetTime.TimeSourceChange">
 <summary>
 Signal that the user has requested a time source change, eg. from COMPUTER to GPS
 </summary>
</member>
<member name="E:VideoMiner.frmSetTime.RequestGPSTime">
 <summary>
 When the user clicks the 'GPS Time' radiobutton this event is raised
 </summary>
</member>
<member name="E:VideoMiner.frmSetTime.RequestContinueTime">
 <summary>
 When the user clicks the 'Continue from Last Clip' radiobutton this event is raised
 </summary>
</member>
<member name="E:VideoMiner.frmSetTime.DataEntryCanceled">
 <summary>
 Fires when user presses Cancel or 'X' button.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:VideoMiner.frmSetTime.#ctor">
 <summary>
 Default constructor
 </summary>
 <remarks>Sets the UserTime property to TimeSpan.Zero</remarks>
</member>
<member name="M:VideoMiner.frmSetTime.#ctor(System.TimeSpan)">
 <summary>
 Constructor
 </summary>
 <param name="tsUserTime">Sets the UserTime property in the constructor to tsUserTime</param>
</member>
<member name="M:VideoMiner.frmSetTime.frmSetTime_Load(System.Object,System.EventArgs)">
 <summary>
 Load the form, set the time textbox up to show the current user time.
 </summary>
</member>
<member name="M:VideoMiner.frmSetTime.cmdOk_Click(System.Object,System.EventArgs)">
 <summary>
 Handles when the user clicks the 'OK' button.
 </summary>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.frmSetTime.ChangeSource(VideoMiner.frmSetTime.WhichTimeEnum)">
 <summary>
 Change the time source type. Also set the textbox background, font, and value
 </summary>
</member>
<member name="M:VideoMiner.frmSetTime.setTextTime">
 <summary>
 Set the text in the Time TextBox to be the hours, minutes, seconds, and milliseconds (rounded to 2 decimal places) of the current time
 </summary>
</member>
<member name="M:VideoMiner.frmSetTime.getTextTime">
 <summary>
 Stores the text time as written in the TextBox into a member variable stored as a Timespan object.
 </summary>
</member>
<member name="M:VideoMiner.frmSetTime.rbManualTime_Click(System.Object,System.EventArgs)">
 <summary>
 Handle the click of the radiobutton to allow the user to manually set the time
 </summary>
</member>
<member name="M:VideoMiner.frmSetTime.rbVideoTime_Click(System.Object,System.EventArgs)">
 <summary>
 Handle the click of the button to set the time to zero
 </summary>
</member>
<member name="M:VideoMiner.frmSetTime.rbComputerTime_Click(System.Object,System.EventArgs)">
 <summary>
 Handle the click of the button to set the time to the current time on this computer
 </summary>
</member>
<member name="M:VideoMiner.frmSetTime.rbGPSTime_Click(System.Object,System.EventArgs)">
 <summary>
 Handle the click of the button to set the time to the GPS connection's time
 </summary>
</member>
<member name="M:VideoMiner.frmSetTime.rbContinueTime_Click(System.Object,System.EventArgs)">
 <summary>
 Handle the click of the button to set the time to the GPS connection's time
 </summary>
</member>
<member name="M:VideoMiner.frmSetTime.validateTimeEntry">
 <summary>
 Check the user input to make sure it is a valid time. Returns True if valid, False otherwise
 </summary>
</member>
<member name="M:VideoMiner.frmSetTime.processOK">
 <summary>
 Processes a click of the OK button or when the Enter key is pressed. Verifies that the time in the textbox it of correct format and if so, Raises the TimeChanged Event before hiding the form.
 </summary>
</member>
<member name="T:VideoMiner.frmSpeciesList">
 <summary>
 This form allows the user to change the order and/or information about the species in the database table 'videominer_species_buttons'. It also allows
 for new species to be enetered (new buttons) or for species to be deleted (removes buttons).
 </summary>
 <remarks>The changes made by the user are enacted by first making changes to the database, then firing an event to the main videominer form, where the dynamic panel will be
 deleted and recreated using the constructor code found in the DynamicPanel class.</remarks>
</member>
<member name="E:VideoMiner.frmSpeciesList.DataEntryCanceled">
 <summary>
 Fires when user presses Cancel or 'X' button.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:VideoMiner.frmSpeciesList.frmSpeciesList_Activated(System.Object,System.EventArgs)">
 <summary>
 Fires when the List becomes active, and calls a function to fill the list from the database.
 </summary>
</member>
<member name="M:VideoMiner.frmSpeciesList.fillSpeciesList">
 <summary>
 Fills in the species list from the database
 </summary>
</member>
<member name="M:VideoMiner.frmSpeciesList.cmdMoveUp_Click(System.Object,System.EventArgs)">
 <summary>
 Move the selected row up by one, and make this change in the database. If the selected item is the first one, do nothing.
 </summary>
</member>
<member name="M:VideoMiner.frmSpeciesList.cmdMoveDown_Click(System.Object,System.EventArgs)">
 <summary>
 Move the selected row down by one, and make this change in the database. If the selected item is the last one, do nothing.
 </summary>
</member>
<member name="M:VideoMiner.frmSpeciesList.cmdMoveToTop_Click(System.Object,System.EventArgs)">
 <summary>
 Move the selected row up to the top, and make this change in the database. If the selected item is the first one, do nothing.
 </summary>
</member>
<member name="M:VideoMiner.frmSpeciesList.cmdMoveToBottom_Click(System.Object,System.EventArgs)">
 <summary>
 Move the selected row down to the bottom, and make this change in the database. If the selected item is the last one, do nothing.
 </summary>
</member>
<member name="M:VideoMiner.frmSpeciesList.MoveListViewItem(System.Int32)">
 <summary>
 Moves the selected item from wherever it is to the given index.
 </summary>
 <param name="moveToIndex">Index to move the selected item to. 0 is the first element.</param>
</member>
<member name="M:VideoMiner.frmSpeciesList.cmdInsertNew_Click(System.Object,System.EventArgs)">
 <summary>
 Bring up the EditSpecies form with empty fields.
 </summary>
</member>
<member name="M:VideoMiner.frmSpeciesList.cmdEdit_Click(System.Object,System.EventArgs)">
 <summary>
 When the user clicks the 'Edit' button, the species code will be set in the frmEditSpecies and then a command run to fill the fields in
 with the corresponding information from the database for that species code. Then the form will be shown.
 </summary>
</member>
<member name="M:VideoMiner.frmSpeciesList.UpdateDrawingOrder">
 <summary>
 Change the database to relect the user change in order in the list. Once the database has been modified, raise an event to the main form so that
 the dynamic panel can be redrawn.
 </summary>
</member>
<member name="M:VideoMiner.frmSpeciesList.cmdDelete_Click(System.Object,System.EventArgs)">
 <summary>
 When the user clicks the delete button, whatever list item is selected will be deleted from the database and removed from the button collection.
 A confirmation dialog will be issued first.
 </summary>
</member>
<member name="M:VideoMiner.frmSpeciesList.buttonsModified">
 <summary>
 Handles the case in which the user has changed something about the species buttons layout using the edit species buttons form.
 </summary>
</member>
<member name="T:VideoMiner.frmVideoPlayer">
 <summary>
 The frmVideoPlayer class provides a form with an instance of the axWindowsMediaPlayer cvontrol,
 a trackbar to show the position of the video, a label for the current position,
 a label for the duration of the video clip, and a picturebox which shows what is currently
 happening with the video (playing, stopped, paused).
 </summary>
</member>
<member name="F:VideoMiner.frmVideoPlayer.m_currentMedia">
 <summary>
 The currently playing media file
 </summary>
</member>
<member name="F:VideoMiner.frmVideoPlayer.VIDEO_TIME_FORMAT">
 <summary>
 Default format for the time labels
 Format is Hours:Minutes:Seconds.DecimalPartOfSeconds
 D4 = 4 decimal places for that item
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.frmVideoPlayer.FRAMES_TO_SKIP">
 <summary>
 Default number of frames to skip when incrementally stepping through the frames
 </summary>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.frmVideoPlayer.m_strVideoTimeFormat">
 <summary>
 Member variable to hold the time format to show on the video labels and in
 CurrentVideoTimeFormatted property
 </summary>
</member>
<member name="F:VideoMiner.frmVideoPlayer.m_tsDurationTime">
 <summary>
 Member variable to hold the video's duration or length.
 </summary>
</member>
<member name="F:VideoMiner.frmVideoPlayer.m_tsCurrentVideoTime">
 <summary>
 Member variable to hold the video's current time
 </summary>
</member>
<member name="F:VideoMiner.frmVideoPlayer.m_blRecordPerSecond">
 <summary>
 Member variable to hold whether or not to record data every second
 </summary>
</member>
<member name="F:VideoMiner.frmVideoPlayer.m_blIsEndOfVideo">
 <summary>
 Member variable to hold whether or not the video is at the end
 </summary>
</member>
<member name="F:VideoMiner.frmVideoPlayer.m_dblRate">
 <summary>
 Member variable to hold the rate the video will be played at
 </summary>
</member>
<member name="F:VideoMiner.frmVideoPlayer.m_strFilename">
 <summary>
 Member variable to hold the filename
 </summary>
</member>
<member name="F:VideoMiner.frmVideoPlayer.m_sngFPS">
 <summary>
 Member variable to hold the frames per second for the video
 </summary>
</member>
<member name="F:VideoMiner.frmVideoPlayer.m_intFramesToSkip">
 <summary>
 The number of frames to skip when incrementally stepping forward through frames
 </summary>
</member>
<member name="F:VideoMiner.frmVideoPlayer._m_pnlTransparentPanel">
 <summary>
 Member variable to hold the transparent panel used to overlay the Vlc.DotNet control so that the user
 can click on the video to toggle play/pause
 </summary>
</member>
<member name="P:VideoMiner.frmVideoPlayer.Position">
 <summary>
 This property contains the position of the currently loaded video.
 </summary>
 <value>Seconds from the beginning of the video</value>
 <returns>A number of type Double</returns>
</member>
<member name="P:VideoMiner.frmVideoPlayer.IsPlaying">
 <summary>
 This property is readonly and contains a boolean which is True if
 the video is currently playing and False otherwise.
 </summary>
 <returns>True or False</returns>
</member>
<member name="P:VideoMiner.frmVideoPlayer.IsStopped">
 <summary>
 This property is readonly and contains a boolean which is True if
 the video is currently stopped and False otherwise.
 </summary>
 <returns>True or False</returns>
</member>
<member name="P:VideoMiner.frmVideoPlayer.IsPaused">
 <summary>
 This property is readonly and contains a boolean which is True if
 the video is currently paused and False otherwise.
 </summary>
 <returns>True or False</returns>
</member>
<member name="P:VideoMiner.frmVideoPlayer.IsEndOfVideo">
 <summary>
 This property contains a boolean which is True if the video has reached its end.
 </summary>
 <returns>True or False</returns>
</member>
<member name="P:VideoMiner.frmVideoPlayer.CurrentVideoTimeFormatted">
 <summary>
 This property is readonly and returns a formatted string representing the time at the current
 position of the video. The formatting string is defined in the constructor (either default or custom).
 </summary>
</member>
<member name="P:VideoMiner.frmVideoPlayer.CurrentVideoTime">
 <summary>
 This property is readonly and returns a System.Timespan object representing the time at the current position of the video.
 </summary>
 <returns>System.Timespan</returns>
 <remarks></remarks>
</member>
<member name="P:VideoMiner.frmVideoPlayer.FPS">
 <summary>
 This property is readonly and contains a number of type 'Single' which represents the Frames per Second for the video.
 </summary>
 <returns>Single number</returns>
 <remarks> Note this almost always returns 0 so its use is limited</remarks>
</member>
<member name="P:VideoMiner.frmVideoPlayer.Rate">
 <summary>
 This property contains a number of type 'Double' which represents the play rate for the video.
 For normal playback this will be 1.0. For double speed, it will be 2.0
 </summary>
 <value>Double number greater or equal to 0.0</value>
 <returns>Double number</returns>
 <remarks></remarks>
</member>
<member name="P:VideoMiner.frmVideoPlayer.Filename">
 <summary>
 This property contains a 'String' which represents the filename for the video.
 </summary>
 <returns>String</returns>
</member>
<member name="E:VideoMiner.frmVideoPlayer.PauseEvent">
 <summary>
 This event is triggered when the user pauses the video from within this form.
 </summary>
</member>
<member name="E:VideoMiner.frmVideoPlayer.PlayEvent">
 <summary>
 This event is triggered when the user plays the video from within this form.
 </summary>
</member>
<member name="E:VideoMiner.frmVideoPlayer.StopEvent">
 <summary>
 This event is triggered when the user stops the video from within this form.
 </summary>
</member>
<member name="E:VideoMiner.frmVideoPlayer.VideoEndedEvent">
 <summary>
 This event is triggered when the video has ended.
 </summary>
</member>
<member name="E:VideoMiner.frmVideoPlayer.ClosingEvent">
 <summary>
 This event is triggered when the frmVideoPlayer form is closed by clicking the 'X' top right of the window.
 </summary>
</member>
<member name="E:VideoMiner.frmVideoPlayer.TimerTickEvent">
 <summary>
 This event is triggered when the timer ticks. It is used to send a signal so that
 the parent will always have access to the correct data (current time) from the video.
 </summary>
</member>
<member name="E:VideoMiner.frmVideoPlayer.RightArrowPressedEvent">
 <summary>
 If the Right arrow key is pressed inside this form, this event will be raised
 </summary>
 <remarks></remarks>
</member>
<member name="E:VideoMiner.frmVideoPlayer.CaptureScreenEvent">
 <summary>
 If the F10 key is pressed inside this form, this event will be raised to signal that
 we want to take a screen grab.
 </summary>
</member>
<member name="M:VideoMiner.frmVideoPlayer.#ctor(System.String,System.Int32)">
 <summary>
 Default constructor. The label time format will be the default. Current time and Duration are set to zero.
 </summary>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.frmVideoPlayer.#ctor(System.String,System.String,System.Int32)">
 <summary>
 Constructor with custom time format string. Should look something like this: "{0:D2}:{1:D2}:{2:D2}.{3:D2}"
 Current time and Duration are set to zero.
 </summary>
 <param name="videoTimeFormat"></param>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.frmVideoPlayer.frmVideoPlayer_Load(System.Object,System.EventArgs)">
 <summary>
 Loads the fmrVideoPlayer form. All member variables are initialized, and the video file is opened as a new Vlc.DotNet.Core.Medias.PathMedia object.
 A System.Timer is started to generate update events every 500ms.
 </summary>
 <param name="sender">System.Object</param>
 <param name="e">System.EventArgs</param>
</member>
<member name="M:VideoMiner.frmVideoPlayer.GetEncoder(System.Drawing.Imaging.ImageFormat)">
 <summary>
 Get the current codec being run in the video window
 </summary>
 <param name="format">The image format on the current video</param>
</member>
<member name="M:VideoMiner.frmVideoPlayer.ConvertBMP(System.String,System.Drawing.Imaging.ImageFormat)">
 <summary>
 Convert a Bitmap to a different type
 </summary>
 <param name="BMPFullPath">The full path of the bitmap file</param>
 <param name="imgFormat">The format of the image captured from the video</param>
</member>
<member name="M:VideoMiner.frmVideoPlayer.player_KeyDownEvent(System.Object,AxWMPLib._WMPOCXEvents_KeyDownEvent)">
 <summary>
 Cause a frame grab to occur if user presses the F10 key while the player is in fullscreen mode
 </summary>
</member>
<member name="M:VideoMiner.frmVideoPlayer.captureScreen(System.String,System.String,System.String)">
 <summary>
 Takes a frame grab of the current frame in the video player's window.
 A Save Dialog will be opened and the user can choose where to save the file.
 The controls of the windows media player will appear in the image unless the shot is taken
 when the player is in full screen mode.
 </summary>
</member>
<member name="M:VideoMiner.frmVideoPlayer.frmVideoPlayer_Maximized(System.Object,System.EventArgs)">
 <summary>
 If user pressed the maimize button, set the player to fullscreen mode
 </summary>
</member>
<member name="M:VideoMiner.frmVideoPlayer.plyrVideoPlayer_OpenStateChange(System.Object,AxWMPLib._WMPOCXEvents_OpenStateChangeEvent)">
 <summary>
 Handles things once the video is fully loaded. This is needed to accurately get the dureation
 of the video because some are larger than others and will take longer to load.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:VideoMiner.frmVideoPlayer.frmVideoPlayer_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary>
 Unloads the frmVideoPLayer form. The player and timer are stopped and the ClosingEvent is fired
 </summary>
 <param name="sender">System.Object</param>
 <param name="e">System.Windows.Forms.FormClosingEventArgs</param>
</member>
<member name="M:VideoMiner.frmVideoPlayer.playVideo">
 <summary>
 Plays the video and change the picturebox icon to reflect this. Fires the PlayEvent.
 </summary>
 <returns>True or False for success. False is returned if the media was not loaded correctly or an exception was thrown</returns>
 <remarks>If IsEndOfVideo is True and either IsStopped or IsPaused is True, 
 that means that the player is at the end and the play request will attempt to reset the player to the beginning</remarks>
</member>
<member name="M:VideoMiner.frmVideoPlayer.pauseVideo">
 <summary>
 Pause the video and change the picturebox icon to reflect this. Fires the PauseEvent.
 </summary>
 <returns>True or False for success. Only returns False if an exception is thrown</returns>
</member>
<member name="M:VideoMiner.frmVideoPlayer.updateUI">
 <summary>
 Update the trackbar position and the timer text to reflect changes
 </summary>
</member>
<member name="M:VideoMiner.frmVideoPlayer.stopVideo">
 <summary>
 Stop the video and change the picturebox icon to reflect this. Fires the StopEvent.
 </summary>
 <returns>True or False for success. Only returns False if an exception is thrown</returns>
</member>
<member name="M:VideoMiner.frmVideoPlayer.tmrVideo_Tick(System.Object,System.EventArgs)">
 <summary>
 Handles the System.timer tick event. If it is the first one, set up the duration label (the duration cannot be read until the video has started playing).
 If the video has reached it's duration, fire EndedEvent. At all other times, update the label for the current time that the video has reached.
 </summary>
 <param name="sender">System.Object</param>
 <param name="e">System.EventArgs</param>
</member>
<member name="M:VideoMiner.frmVideoPlayer.stepForward(System.Int32)">
 <summary>
 Step forward a number of frames in the video and adjust player controls accordingly
 </summary>
 <param name="intFramesToSkip">Number of frames to skip, typically between 50 and 1000</param>
 <returns>Boolean if the stepping succeeded</returns>
</member>
<member name="M:VideoMiner.frmVideoPlayer.getCurrentPercentComplete">
 <summary>
 Calculates the current percentage of the video which has been seen based on the
 current time of the player
 </summary>
 <returns>A Double between 0 and 100</returns>
</member>
<member name="M:VideoMiner.frmVideoPlayer.m_pnlTransparentPanel_MouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
 <summary>
 This handles the user clicking on the video by using a transparent panel overlaid on the video.
 The video will toggle between paused and playing. 
 The Vlc.DotNet control does not capture MouseClick Events on its own so the transparent panel was needed.
 </summary>
 <param name="sender">System.Object</param>
 <param name="e">System.Windows.Forms.MouseEventArgs</param>
 <remarks>If the user clicks the right mouse button, a simple help dialog will pop up</remarks>
</member>
<member name="M:VideoMiner.frmVideoPlayer.videoContextMenuChoice(System.Object,System.EventArgs)">
 <summary>
 This is the help dialog that appears when the user clicks the right mouse button in the video window.
 </summary>
 <param name="sender">System.Object</param>
 <param name="e">System.EventArgs</param>
</member>
<member name="M:VideoMiner.frmVideoPlayer.plyrVideo_Ended(System.Object,AxWMPLib._WMPOCXEvents_PlayStateChangeEvent)">
 <summary>
 This handles the Event 'EndReached' fired by the Vlc.DotNet control.
 </summary>
</member>
<member name="M:VideoMiner.frmVideoPlayer.endOfVideo">
 <summary>
 The end of the video has been reached. Do some updating on the form and raise the VideoEnded event.
 </summary>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.frmVideoPlayer.getFormattedCurrentVideoTimeString">
 <summary>
 Returns a formatted string for the current video time
 </summary>
 <returns>A formatted string or an unformatted string if an exception was thrown</returns>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.frmVideoPlayer.getFormattedDurationString">
 <summary>
 Returns a formatted string for the duration video time
 </summary>
 <returns>A formatted string or an unformatted string if an exception was thrown</returns>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.frmVideoPlayer.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
 <summary>
 Required to override the default behaviour of the arrow keypresses in the form
 </summary>
 <param name="msg"></param>
 <param name="keyData"></param>
 <returns>True if the right arrow was pressed</returns>
 <remarks>Raises the RightArrowPressedEvent</remarks>
</member>
<member name="T:VideoMiner.modGlobals">
 <summary>
 This module defines 'Global' variables and functions.
 </summary>
 <remarks>Think hard before adding something here, especially new classes. The program should
 remain object-oriented as much as possible and adding things here will likely break that</remarks>
</member>
<member name="M:VideoMiner.modGlobals.SingleQuote(System.String)">
 <summary>
 Place single quotes (') around a String
 </summary>
 <param name="strValue">The string to place single quotes around</param>
 <returns>A single quoted String</returns>
 <remarks>Used for database query string building in VideoMiner</remarks>
</member>
<member name="M:VideoMiner.modGlobals.DoubleQuote(System.String)">
 <summary>
 Place double quotes (") around a String
 </summary>
 <param name="strValue">The string to place double quotes around</param>
 <returns>A double quoted String</returns>
 <remarks>Used for database query string building in VideoMiner</remarks>
</member>
<member name="M:VideoMiner.modGlobals.numericTextboxValidation(System.Windows.Forms.KeyPressEventArgs@)">
 <summary>
 Validates text entered into TextBoxes in the project
 </summary>
 <param name="e">System.Windows.Forms.KeyPressEventArgs</param>
 <remarks>Allows only digits, period, and backspace to be used in a TextBox</remarks>
</member>
<member name="M:VideoMiner.modGlobals.ToMilitaryTime(System.DateTime)">
 <summary>
 Change a given time into military (24 hour) time
 </summary>
 <param name="dtRealTime">DateTime</param>
 <returns>String representing the time in 24-hour format</returns>
 <remarks>If the number of milliseconds in the time is greater than 500, the seconds will be rounded up by one</remarks>
</member>
<member name="M:VideoMiner.modGlobals.pad0(System.Int32)">
 <summary>
 Pad a string of length 1 with a zero. Used to make things like hours=0 into hours="00"
 </summary>
</member>
<member name="M:VideoMiner.modGlobals.InvokeAction``1(System.Action{``0},``0,System.Boolean)">
 <summary>
 Will raise an event across threads
 </summary>
 <typeparam name="T"></typeparam>
 <param name="anAction"></param>
 <param name="Arg"></param>
 <param name="ThrowMainFormMissingError"></param>
 <remarks>Used to raise events from a side-thread to the UI thread by marshalling the call
 Example:
 Write a subroutine to raise the event
 Protected Overridable Sub GPSConnected()
    RaiseEvent GPSConnectedEvent()
 End Sub
 Then invoke it like this:
   InvokeAction(AddressOf GPSConnected, New EventArgs())
 Code from:
 http://www.codeproject.com/Articles/21168/Raising-Events-from-Other-Threads
 </remarks>
</member>
<member name="T:VideoMiner.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.Decrease_Icon">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.FastForward_Icon">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.FastForward_Icon_Inverse">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.FastForward3_Icon_Inverse">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.FastForward4_Icon_Inverse">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.Increase_Icon">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.Next_Icon">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.Pause_Icon">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.Pause_Icon_Inverse">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.Play_Icon">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.Play_Icon_Inverse">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.Previous_Icon">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.Rewind_Icon">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.Rewind_Icon_Inverse">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.Rewind3_Icon_Inverse">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.Rewind4_Icon_Inverse">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.ScreenCapture">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.ScreenCapture_">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.Stop_Icon">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.Stop_Icon_Inverse">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:VideoMiner.My.Resources.Resources.VideoMiner_exe">
<summary>
  Looks up a localized resource of type System.Byte[].
</summary>
</member>
<member name="M:VideoMiner.Point.GetPoint">
 <summary>
 Get a point location from a NMEA string
 </summary>
 <returns>True or False</returns>
 <remarks></remarks>
</member>
<member name="F:VideoMiner.frmSpeciesEvent.m_speciesName">
 <summary>
 Holds the species name
 </summary>
</member>
<member name="F:VideoMiner.frmSpeciesEvent.m_speciesCode">
 <summary>
 Holds the species code
 </summary>
</member>
<member name="F:VideoMiner.frmSpeciesEvent.m_range">
 <summary>
 Holds the currently entered range
 </summary>
</member>
<member name="F:VideoMiner.frmSpeciesEvent.m_side">
 <summary>
 Holds the currently selected Side code as found in the database table lu_observed_side
 </summary>
</member>
<member name="F:VideoMiner.frmSpeciesEvent.m_IDConfidence">
 <summary>
 Holds the currently selected ConfidenceID code as found in the database table lu_confidence_ids
 </summary>
</member>
<member name="F:VideoMiner.frmSpeciesEvent.m_Abundance">
 <summary>
 Holds the currently selected Abundance code as found in the database table lu_acfor_scale
 </summary>
</member>
<member name="F:VideoMiner.frmSpeciesEvent.m_Count">
 <summary>
 Holds the currently entered count
 </summary>
</member>
<member name="F:VideoMiner.frmSpeciesEvent.m_Height">
 <summary>
 Holds the currently entered height
 </summary>
</member>
<member name="F:VideoMiner.frmSpeciesEvent.m_Width">
 <summary>
 Holds the currently entered width
 </summary>
</member>
<member name="F:VideoMiner.frmSpeciesEvent.m_Length">
 <summary>
 Holds the currently entered length of the specimen
 </summary>
</member>
<member name="F:VideoMiner.frmSpeciesEvent.m_Comments">
 <summary>
 Holds the currently entered comments
 </summary>
</member>
<member name="F:VideoMiner.frmSpeciesEvent.m_tuple">
 <summary>
 A tuple for the Dictionary object, m_dict.
 </summary>
</member>
<member name="F:VideoMiner.frmSpeciesEvent.m_dict">
 <summary>
 Dictionary of key/value pairs that hold the currently selected data for this species event.
 The first parameter is the name of the field in the database table lu_data. The tuple is a triplet of data code (from lu_data_codes),
 the data value to be inserted, and a boolean for whether or not the item was the one pressed (in case there are more than one in the dictionary).
 </summary>
</member>
<member name="E:VideoMiner.frmSpeciesEvent.EndDataEntryEvent">
 <summary>
 Fires when the OK button is pressed.
 </summary>
</member>
<member name="E:VideoMiner.frmSpeciesEvent.DataEntryCanceled">
 <summary>
 Fires when user presses Cancel or 'X' button.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="P:VideoMiner.frmSpeciesEvent.DataTuple">
 <summary>
 Return the key value data for the current value
 </summary>
 <returns></returns>
</member>
<member name="M:VideoMiner.frmSpeciesEvent.pnlSpeciesEvent_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
 <summary>
  When the SpeciesEventForm is displayed, draw a red arc at the bottom of the form with an
  attatched red line going to the top of the form. This line helps a user visualize the center line,
  and ranges to the left or right of the center line.
 </summary>
</member>
<member name="M:VideoMiner.frmSpeciesEvent.Acknowledge(System.String,System.String,System.String)">
 <summary>
 Acknowledge that everything is verified by setting all member variables and building the dictionary.
 An event will be fired to let the parents know we are ready.
 </summary>
 <param name="speciesCount">The species count to enter for this quick species entry.</param>
 <param name="speciesAbundance">The abundance to enter for this quick species entry.</param>
 <param name="ackComment">Optional comment sent for the abundance case only.</param>
</member>
<member name="M:VideoMiner.frmSpeciesEvent.buildDictionary">
 <summary>
 Build the dictionary of key/value pairs for the data the user chose.
 </summary>
</member>
<member name="M:VideoMiner.frmSpeciesEvent.selectSpeciesInCombobox">
 <summary>
 Resets the species combobox back to it's correct default species name
 </summary>
 <remarks></remarks>
</member>
<member name="M:VideoMiner.frmSpeciesEvent.formShown(System.Object,System.EventArgs)">
 <summary>
 This code is run everytime the form's show function is called. It resets the species combobox back to it's correct default species name
 </summary>
</member>
<member name="M:VideoMiner.frmSpeciesEvent.txt_Validating_NonNull(System.Object,System.ComponentModel.CancelEventArgs)">
 <summary>
 Validate that the count texbox only has digits in it (an integer). And it must have at least one digit (no empty strings).
 </summary>
</member>
<member name="M:VideoMiner.frmSpeciesEvent.txt_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
 <summary>
 Validate that the non-count texboxes only have empty strings, integers, or real numbers.
 </summary>
</member>
<member name="M:VideoMiner.frmSpeciesEvent.btnCancel_Click(System.Object,System.EventArgs)">
 <summary>
 When user presses cancel, hide the form instead of closing it. It is created only once and needs to remain persistent.
 </summary>
</member>
<member name="M:VideoMiner.frmSpeciesEvent.me_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary>
 Capture the event when the user presses the 'X' button top right. Instead of closing the form, just hide it.
 </summary>
</member>
<member name="M:VideoMiner.frmSpeciesEvent.cboSide_SelectionChangeCommitted(System.Object,System.EventArgs)">
 <summary>
 If the user selects "On Center", disable the Range textbox and remove its value. If user selects "Port" or "Starboard",
 enable the Range textbox.
 </summary>
</member>
<member name="T:VideoMiner.frmTableView">
 <summary>
 This form will show a table which is supplied in the constructor as a DataTable.
 It will allow the user to select a row, which will cause a query to insert the data
 in the database
 </summary>
</member>
<member name="F:VideoMiner.frmTableView.m_data_code_name">
 <summary>
 Data code name as seen in the database table 'data'
 </summary>
</member>
<member name="F:VideoMiner.frmTableView.m_data_code">
 <summary>
 Data code as seen in the database table 'lu_data_codes'
 </summary>
</member>
<member name="F:VideoMiner.frmTableView.m_data_description">
 <summary>
 Data description for row selected by user
 </summary>
</member>
<member name="F:VideoMiner.frmTableView.m_data_value">
 <summary>
 Data value as selected by the user (from the currently selected row)
 </summary>
</member>
<member name="F:VideoMiner.frmTableView.m_tuple">
 <summary>
 A tuple which represents the data which were chosen
 </summary>
</member>
<member name="F:VideoMiner.frmTableView.m_dict">
 <summary>
 Dictionary of key/value pairs that hold the currently selected data.
 The first parameter is the name of the field in the database table lu_data, the second is the tuple above.
 </summary>
</member>
<member name="E:VideoMiner.frmTableView.ClearEvent">
 <summary>
 If user presses Clear button, this will fire so that the main form can update its dynamic buttons and textboxes
 </summary>
 <remarks></remarks>
</member>
<member name="E:VideoMiner.frmTableView.EndDataEntryEvent">
 <summary>
 Fires when a new row is selected.
 </summary>
</member>
<member name="E:VideoMiner.frmTableView.DataEntryCanceled">
 <summary>
 Fires when user presses Cancel or 'X' button.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="P:VideoMiner.frmTableView.SelectedCode">
 <summary>
 If a row is selected, return the first cell's value from that row.
 If no row is selected, return the empty string.
 </summary>
</member>
<member name="P:VideoMiner.frmTableView.SelectedCodeName">
 <summary>
 If a row is selected, return the second cell's value from that row
 If no row is selected, return the empty string.
 </summary>
</member>
<member name="P:VideoMiner.frmTableView.Comment">
 <summary>
 Return the contents of the comment box, which may be an empty string.
 </summary>
</member>
<member name="M:VideoMiner.frmTableView.frmTableView_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary>
 Capture the press of the 'X' button and hide instead of closing to avoid an exception on re-opening
 </summary>
</member>
<member name="M:VideoMiner.frmTableView.ResizeGrid">
 <summary>
 Once the form loads, resize the grid so that there is no horizontal scrollbar
 </summary>
</member>
<member name="M:VideoMiner.frmTableView.DataGridView1_SelectionChanged(System.Object,System.EventArgs)">
 <summary>
 Handles the event when the user selects a row of the table. If the comment box is not empty, it will raise an event so that the main form can
 insert a new record in the database to capture the comment.
 </summary>
</member>
<member name="M:VideoMiner.frmTableView.buildDictionary">
 <summary>
 Build the dictionary of key/value pairs for the data the user chose.
 </summary>
</member>
<member name="M:VideoMiner.frmTableView.btnClear_Click(System.Object,System.EventArgs)">
 <summary>
 If the clear button is pressed, clear the selected row so that there is no selection, and raise an event to the parent.
 </summary>
</member>
<member name="M:VideoMiner.frmTableView.clearSelection">
 <summary>
 Clear the datagrid selection and empty the comment box
 </summary>
</member>
<member name="T:VideoMiner.TransparentPanel">
 <summary>
 This Class was added To allow a transparent panel To lay over the video player control, 
 so that mouse click events can be captured On the video itself.
 </summary>
</member>
<member name="F:VideoMiner.VideoMinerDataGridView.m_synced">
 <summary>
 Whether or not the grid is synced with the database
 </summary>
</member>
<member name="F:VideoMiner.VideoMinerDataGridView.m_table_name">
 <summary>
 Name of the table that is bound to the DataGridView
 </summary>
</member>
<member name="F:VideoMiner.VideoMinerDataGridView.m_data_table">
 <summary>
 DataTable of the data found in the table given by m_table_name
 </summary>
</member>
<member name="F:VideoMiner.VideoMinerDataGridView.m_primary_key_field">
 <summary>
 Name of the primary key field in the table
 </summary>
</member>
<member name="F:VideoMiner.VideoMinerDataGridView.m_show_primary_key_field">
 <summary>
 Show the column which holds the Primary Keys?
 </summary>
</member>
<member name="F:VideoMiner.VideoMinerDataGridView.m_curr_row">
 <summary>
 The current row that is being displayed. This is used so that after a data entry event,
 the view won't jump back to the beginning of the grid.
 </summary>
</member>
<member name="F:VideoMiner.VideoMinerDataGridView.m_curr_col">
 <summary>
 The current column that is being displayed. This is used so that after a data entry event,
 the view won't jump back to the beginning of the grid.
 </summary>
</member>
<member name="T:VideoMiner.VideoMinerDataGridView.stcRowColoring">
 <summary>
 Coloring of a row in the data grid. This structure represents a single row in the grid.
 The two cell lists hold the background and foreground colors for the cells in the row.
 If the columns are allowed to be sorted, this would be required to recolor the cells
 after the sort.
 </summary>
</member>
<member name="F:VideoMiner.VideoMinerDataGridView.m_arr_coloring">
 <summary>
 A list of row colorings to keep track of dirty cells when the columns are sorted.
 </summary>
</member>
<member name="F:VideoMiner.VideoMinerDataGridView._m_frmViewDataTable">
 <summary>
 A form showing the data code table so user can see all the currently-assigned data codes
 </summary>
</member>
<member name="T:VideoMiner.VideoMinerDataGridView.MoveDirection">
 <summary>
 Enumeration describing which way to move the button definition in the list
 </summary>
</member>
<member name="T:VideoMiner.VideoMinerDataGridView.RowOrderEnum">
 <summary>
 Order the rows are displayed by Primary key id
 </summary>
</member>
<member name="F:VideoMiner.VideoMinerDataGridView.m_show_buttons">
 <summary>
 Show or hide the last column buttons, i.e. Move, add row, delete, show data codes buttons
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.fetchData">
 <summary>
 Fetch the data from the database, and enable/disble buttons according to what was retreived.
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.grd_DataBindingComplete(System.Object,System.EventArgs)">
 <summary>
 Hide the primary key column in the DataGridView
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.setSynced">
 <summary>
 Set the control to reflect that the DataGridView is synced with the database.
 Set up the color array information to be all clean.
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.setUnsynced">
 <summary>
 Set the control to reflect that the DataGridView is not synced with the database
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.writePrimaryKeysInRowHeaders">
 <summary>
 Set the row headers to be the Primary key values, and make sure the header is wide enough.
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.disableColumnSorting">
 <summary>
 Disable the ColumnSort feature in the DataGridView
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.grd_DataError(System.Object,System.Windows.Forms.DataGridViewDataErrorEventArgs)">
 <summary>
 Give column and row-specific error message to user if incorrect data type was entered.
 Avoids errors/exceptions during the update to the database.
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.compareGridAndDatabaseRows(System.Int32,System.Data.DataRow)">
 <summary>
 Returns true if the row in the database for the supplied Primary Key 'intKey'
 has exactly the same data as the row in the DataRow variable dr.
 </summary>
 <returns></returns>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.applyColoring">
 <summary>
 Apply the coloring to the DataGridView as laid out in the m_arr_coloring list
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.setCell(System.Int32,System.Int32,VideoMiner.VideoMinerDataGridView.CellStatus)">
 <summary>
 Set the coloring on the grid to reflect the status of the cell given by the
 row and col coordinates in the DataGridView.
 The background color for the whole row is also changed here.
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.setPrimaryKey(System.Int32,System.Int32)">
 <summary>
 Sets the coloring array to hold the primary key that is found in the database.
 Only sets it if the row is not dirty, which means the database key was in the cell
 before the edit happened.
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.getPrimaryKey(System.Int32)">
 <summary>
 Gets the primary key from the coloring array. This will be the one that is actually in the
 database, not the one currently appearing in the grid.
 </summary>
 <param name="row"></param>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.grd_CellBeginEdit(System.Object,System.Windows.Forms.DataGridViewCellCancelEventArgs)">
 <summary>
 Store the database primary key for the cell being edited if it is a primary key cell.
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.grd_CellValueChanged(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary>
 Compare the row's data to what is in the database table. If they are the same,
 set the control to be synced with the database.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.grd_CellFormatting(System.Object,System.Windows.Forms.DataGridViewCellFormattingEventArgs)">
 <summary>
 Apply coloring to the grid whenever formatting takes place.
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.grd_CellLeave(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary>
 When a cell is left, do a quick check to see if the values were left the same as what's in the
 database. If they all are, make the row clean again.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.updateDatabaseWithGridValues">
 <summary>
 Update the MS Access database table 'data' with values from the DataGridView object.
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.deleteSelectedRows(System.Boolean)">
 <summary>
 Deletes selected rows from the MS access database as well as in the grid view. A confirmation box will verify this.
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.grd_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 Key events for the data grid. The arrow keys will move to adjacent cells, the Enter key will submit the edit (if applicable)
 and move to the next cell down or, if it is currently the last row, the next cell on the right, or if neither of those,
 the top left-most cell. Pressing the 'delete' key will delete rows from the grid view and the database.
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.grdVideoMinerDatabase_EditingControlShowing(System.Object,System.Windows.Forms.DataGridViewEditingControlShowingEventArgs)">
 <summary>
 Allow keys to be captured while the editor is focussed on an individual cell
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.TextBox_PreviewKeyDown(System.Object,System.Windows.Forms.PreviewKeyDownEventArgs)">
 <summary>
 Sets up the Enter or Return key to be captured by the TextBox, which is a cell in the DataGridView.
 This is the only way that the Enter key can be used to submit a value when editing a cell.
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.grd_RightClick(System.Object,System.Windows.Forms.MouseEventArgs)">
 <summary>
 Captures right click in the DataGridView. This will delete rows from the grid view and the database.
 </summary>
 <remarks>If no rows are selected, a message will tell you to select rows and then press delete</remarks>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.grd_CellValidating(System.Object,System.Windows.Forms.DataGridViewCellValidatingEventArgs)">
 <summary>
 Validate the cell values if user makes them NULL. Avoids errors/exceptions during the update to the database.
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.btnRevertDatabase_Click(System.Object,System.EventArgs)">
 <summary>
 Reload the grid from the access database. A confirmation box will be displayed and if the user aggrees then any changes in the grid will
 be discarded and the database will be reloaded from scratch
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.btnAddRow_Click(System.Object,System.EventArgs)">
 <summary>
 Add a new empty row to the database and the DataGridView.
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.moveRecord(VideoMiner.VideoMinerDataGridView.MoveDirection)">
 <summary>
 Move the selected item up or down in the table, and raise the event to the parent.
 The implmentation effectively swaps the two primary keys for the two records.
 If there is more than one selected row, a messagebox will be issued and the event cancelled.
 The variable direction is used to determine move direction Up or Down.
 </summary>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.getSelectedRowsPrimaryKeys">
 <summary>
 Returns a list of the currently selected rows.
 </summary>
 <returns>A list of DataRows. Nothing if there are no selected rows.</returns>
</member>
<member name="M:VideoMiner.VideoMinerDataGridView.parentHiding">
 <summary>
 If the parent is being hidden, this will close the child datacodes form.
 </summary>
</member>
</members>
</doc>
