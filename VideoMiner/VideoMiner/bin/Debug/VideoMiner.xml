<?xml version="1.0"?>
<doc>
<assembly>
<name>
VideoMiner
</name>
</assembly>
<members>
<member name="M:VideoMiner.frmConfigureButtons.#ctor">
	<summary>
 Initialize the query, and extract the data that query defines into a DataSet with corresponding DataTable.
 Populate the list and set up list attributes.
 </summary>
</member><member name="M:VideoMiner.frmConfigureButtons.cmdMoveUp_Click(System.Object,System.EventArgs)">
	<summary>
 Clicking this button calls the function that moves the first selected item up in the list, and raises the event to the main form so that the buttons can
 be redrawn to correspond to the new order.
 </summary>
</member><member name="M:VideoMiner.frmConfigureButtons.cmdMoveDown_Click(System.Object,System.EventArgs)">
	<summary>
 Clicking this button calls the function that moves the first selected item down in the list, and raises the event to the main form so that the buttons can
 be redrawn to correspond to the new order.
 </summary>
</member><member name="M:VideoMiner.frmConfigureButtons.MoveListViewItem(System.Boolean)">
	<summary>
 Move the first selected item up in the list, and raise the event to the main form so that the buttons can
 be redrawn to correspond to the new order.
 </summary>
	<param name="moveUp">If true, the item will be moved up the list (when possible). If false, it will be moved down (when possible)</param>
</member><member name="M:VideoMiner.frmConfigureButtons.cmdCreateNewButton_Click(System.Object,System.EventArgs)">
	<summary>
 Clicking this button will bring up the 'add button' dialog which allows the definition of a new button.
 </summary>
</member><member name="M:VideoMiner.frmConfigureButtons.cmdEditButton_Click(System.Object,System.EventArgs)">
	<summary>
 Clicking this button will bring up the 'add button' dialog which will allow the editing of the current button's attributes.
 </summary>
</member><member name="M:VideoMiner.frmConfigureButtons.cmdDone_Click(System.Object,System.EventArgs)">
	<summary>
 Pressing this button will Hide the dialog
 </summary>
</member><member name="M:VideoMiner.frmConfigureButtons.UpdateDrawingOrder(System.String)">
	<summary>
 Changes the database values for the 'DrawingOrder' field to reflect the change in drawing order.
 </summary>
</member><member name="M:VideoMiner.frmConfigureButtons.cmdDeleteButton_Click(System.Object,System.EventArgs)">
	<summary>
 Clicking this button will remove the selected button from the project, including from the database.
 </summary>
</member><member name="M:VideoMiner.frmConfigureButtons.cmdMoveToPanel_Click(System.Object,System.EventArgs)">
	<summary>
 Clicking this button results in the first selected button being moved to the other panel.
 The database will also have the entry moved from one button table to the other.
 </summary>
</member><member name="F:VideoMiner.DynamicPanel.m_label">
	<summary>
 Panel label, typically which kind of data are stored in panel buttons
 </summary>
</member><member name="F:VideoMiner.DynamicPanel.m_repeat_for_every_record">
	<summary>
 If checked, the data will be recorded for every insert
 </summary>
	<remarks>This may or may not be shown in the panel</remarks>
</member><member name="F:VideoMiner.DynamicPanel.m_define_all_button">
	<summary>
 The 'DEFINE ALL' button which simply opens all dynamic buttons on the panel up in succession,
 allowing the user to define all attributes at once.
 </summary>
	<remarks>This may or may not be shown in the panel</remarks>
</member><member name="F:VideoMiner.DynamicPanel.m_num_dynamic_buttons">
	<summary>
 The number of dynamic buttons currently on the panel
 </summary>
</member><member name="F:VideoMiner.DynamicPanel.m_dynamic_buttons">
	<summary>
 Array of Dynamic buttons. This will be redimensioned at runtime
 </summary>
</member><member name="F:VideoMiner.DynamicPanel.m_dynamic_textboxes">
	<summary>
 Array of Dynamic textboxes. This will be redimensioned at runtime. This is the same length as the m_dynamic_buttons array
 </summary>
</member><member name="F:VideoMiner.DynamicPanel.m_y_offset">
	<summary>
 Lets the fillPanel functioin know at what vertical level to start placing dynamic buttons
 </summary>
</member><member name="F:VideoMiner.DynamicPanel.m_gap">
	<summary>
 Gap between dynamic buttons (and the other controls)
 </summary>
</member><member name="F:VideoMiner.DynamicPanel.m_num_static_controls">
	<summary>
 The number of non-dynamic controls on the panel, i.e. label and repeat checkbox and DEFINE ALL button would make 3.
 </summary>
</member><member name="T:VideoMiner.DynamicPanel.WhichTypeEnum">
	<summary>
 Distinguishes between the two types of data this panel can hold, DynamicButtons linked to database table
 data (lookup tables stored as type DataTable) or singular data which are not a DataTable, and have a keyboard shortcut.
 Typically the singular type is used for species code entry buttons.
 </summary>
</member><member name="F:VideoMiner.DynamicPanel.m_which_type">
	<summary>
 Holds the enumeration type for this instance
 </summary>
</member><member name="F:VideoMiner.DynamicPanel.m_tuple">
	<summary>
 A tuple for the Dictionary object, m_dict.
 </summary>
</member><member name="F:VideoMiner.DynamicPanel.m_dict">
	<summary>
 Dictionary of key/value pairs that hold the currently selected data (most recently-pressed button's data) for this panel.
 If the repeat checkbox is visible and checked, the dictionary will hold the key/value pairs for all buttons on the panel,
 not just the most recently-pressed button's data.
 The first parameter is the name of the field in the database table lu_data. The tuple is a triplet of data code (from lu_data_codes),
 the data value to be inserted, and a boolean for whether or not the item was the one pressed (in case there are more than one in the dictionary).
 </summary>
</member><member name="F:VideoMiner.DynamicPanel.m_data_code">
	<summary>
 Data code used for table-based data. e.g. table lu_survey_mode is associated with data code 9 in the lu_data_codes table
 </summary>
	<remarks></remarks>
</member><member name="P:VideoMiner.DynamicPanel.WhichType">
	<summary>
 Enumeration type for this instance. See WhichTypeEnum for descriptions.
 </summary>
</member><member name="P:VideoMiner.DynamicPanel.Dictionary">
 Dictionary of key/value pairs that hold the currently set data for this panel.
 If the repeat checkbox is visible and checked, the dictionary will hold the key/value pairs for all buttons on the panel,
 not just the most recently-pressed button's data.

</member><member name="E:VideoMiner.DynamicPanel.NewSpeciesEntryEvent">
	<summary>
 This event will propagate or bubble up the same event raised from within the DynamicButton class. It signals that the user wants to enter a new record in the database
 for a species sighting.
 </summary>
</member><member name="E:VideoMiner.DynamicPanel.SignalVideoPause">
	<summary>
 Signals the parent that a button has been pressed on this panel and we request that the video be paused while data entry takes place.
 </summary>
</member><member name="E:VideoMiner.DynamicPanel.CheckForDirtyDataEvent">
	<summary>
 Fire event to have parent form check for dirty data or anything else prior to launching the button code.
 </summary>
</member><member name="M:VideoMiner.DynamicPanel.#ctor(System.String,System.Boolean,System.Int32,System.Int32,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32)">
	<summary>
 Create the DynamicPanel object.
 </summary>
	<param name="strPanelName">Name for the Panel.</param>
	<param name="blIncludeDefineAllButton">True if you want to include a 'Define All' button.</param>
	<param name="intButtonWidth">The width of all the buttons on the panel.</param>
	<param name="intButtonHeight">The height of all the buttons on the panel.</param>
	<param name="strButtonFont">The font for all the buttons on the panel.</param>
	<param name="intButtonTextSize">The font size (pts) for all the buttons on the panel.</param>
	<param name="blIncludeRepeatCheckbox">True if you want to include a 'Repeat for each record' Checkbox on the panel.</param>
	<param name="blRepeatIsChecked">If True, the 'Repeat for each record' checkbox will be checked on creation.</param>
	<param name="intRepeatWidth">Width of the 'Repeat for each record' checkbox.</param>
	<param name="intRepeatHeight">Height of the 'Repeat for each record' checkbox.</param>
</member><member name="M:VideoMiner.DynamicPanel.Dispose(System.Boolean)">
	<summary>
 Destructor. Dispose of dynamic arrays of DynamicButtons and Textboxes correctly
 </summary>
</member><member name="M:VideoMiner.DynamicPanel.fillPanel(System.String)">
	<summary>
 Fills the panel with the buttons described in the MS Access table given by strTableName
 </summary>
	<param name="strTableName">Name of the button description table in the MS Access database</param>
</member><member name="M:VideoMiner.DynamicPanel.placeControls">
	<summary>
 Place the controls in the panel in a grid fashion. The two different enumeration types require two different algorithms,
 because one includes textboxes and one doesn't
 </summary>
</member><member name="M:VideoMiner.DynamicPanel.removeAllDynamicControls">
	<summary>
 Removes all dynamic controls (DynamicButton and DynamicTextbox controls) from the panel.
 </summary>
</member><member name="M:VideoMiner.DynamicPanel.PanelDataChanged(System.Object,System.EventArgs)">
	<summary>
 Handles the case where the user changed a selection in a code table (frmTableView). This may result
 in a query being run to insert data into the database. This also handles the case in which
 the table is a "UserEntered" type such as the FOV button which asks the user for a value
 </summary>
	<param name="sender">The DynamicButton that raised the event</param>
</member><member name="M:VideoMiner.DynamicPanel.buildDictionary(VideoMiner.DynamicButton)">
	<summary>
 Build the dictionary of key/value pairs. This will be one item if the checkbox is nothing or not checked
 and all items if the checkbox is checked.
 </summary>
	<param name="btn">The button to build the dictionary for, unless the checkbox is checked in which case this is ignored.</param>
</member><member name="M:VideoMiner.DynamicPanel.buildDictionary">
	<summary>
 Build the dictionary of key/value pairs for all values which have been set on this panel. Note this is only apllicable to WhichTypeEnum.DataTable,
 not WhichTypeEnum.Singular (Species event buttons)
 The 'repeat for every record' checkbox must exist and be checked for this to work.
 Note that there will be no 'True' items because this call is made for a summary of the items, not for a single button press.
 This sub should not be used to make a single record emtry into the database or the DataCode field will be missing.
 </summary>
</member><member name="M:VideoMiner.DynamicPanel.EnableDefineAllButton">
	<summary>
 Allow the 'Define All' button to be pressed
 </summary>
</member><member name="M:VideoMiner.DynamicPanel.DisableDefineAllButton">
	<summary>
 Do not allow the 'Define All' button to be pressed
 </summary>
</member><member name="M:VideoMiner.DynamicPanel.DefineAll(System.Object,System.EventArgs)">
	<summary>
 When user clicks the 'DEFINE ALL' button, it is the same as if they clicked all the dynamic buttons in sequence.
 This is a convinience button. The windows are opened in reverse order so that they will be in the correct order
 ' from top to bottom.
 </summary>
</member><member name="M:VideoMiner.DynamicPanel.new_species_entry_handler(System.Object,System.EventArgs)">
	<summary>
 Handles the event request to insert a new entry into the database. Checks the setting from the Habitat panel, if set to record habitat on every record, 
 the current dictionary will be merged with the species dict, and the result will be inserted into the database.
 </summary>
</member><member name="M:VideoMiner.DynamicPanel.signal_video_pause(System.Object,System.EventArgs)">
	<summary>
 Tell the program to issue a pause video command
 </summary>
	<param name="sender">The DynamicButton that was pressed</param>
</member><member name="M:VideoMiner.DynamicPanel.button_CheckForDirtyDataEvent(System.Object,System.EventArgs)">
	<summary>
 If a DynamicButton is pressed, this will send that DynamicButton object as an argument to the event
 </summary>
	<param name="sender">The DynamicButton that was pressed</param>
</member><member name="T:VideoMiner.DynamicPanel">
	<summary>
 A panel which supports loading of dynamic buttons and dynamic textboxes and may include a
 'DEFINE ALL' button which runs the Click events for each button in the panel in succession.
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.frmVideoPlayer.VIDEO_TIME_FORMAT">
	<summary>
 Default format for the time labels
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.frmVideoPlayer.FRAMES_TO_SKIP">
	<summary>
 Default number of frames to skip when incrementally stepping through the frames
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.frmVideoPlayer.m_strVideoTimeFormat">
	<summary>
 Member variable to hold the time format to show on the video labels and in CurrentVideoTimeFormatted property
 </summary>
</member><member name="F:VideoMiner.frmVideoPlayer.m_tsDurationTime">
	<summary>
 Member variable to hold the video's duration or length.
 </summary>
</member><member name="F:VideoMiner.frmVideoPlayer.m_tsCurrentVideoTime">
	<summary>
 Member variable to hold the video's current ti
 </summary>
</member><member name="F:VideoMiner.frmVideoPlayer.m_blFirstTick">
	<summary>
 Member variable to hold whether or not this is the first tick in the System.Timer's tick events
 </summary>
</member><member name="F:VideoMiner.frmVideoPlayer.m_blChapter">
	<summary>
 Member variable to hold UNKNOWN
 </summary>
</member><member name="F:VideoMiner.frmVideoPlayer.m_blRecordPerSecond">
	<summary>
 Member variable to hold whether or not to record data every second
 </summary>
</member><member name="F:VideoMiner.frmVideoPlayer.m_blIsEndOfVideo">
	<summary>
 Member variable to hold whether or not the video is at the end
 </summary>
</member><member name="F:VideoMiner.frmVideoPlayer.m_dblRate">
	<summary>
 Member variable to hold the rate the video will be played at
 </summary>
</member><member name="F:VideoMiner.frmVideoPlayer.m_strFilename">
	<summary>
 Member variable to hold the filename
 </summary>
</member><member name="F:VideoMiner.frmVideoPlayer.m_sngFPS">
	<summary>
 Member variable to hold the frames per second for the video
 </summary>
</member><member name="F:VideoMiner.frmVideoPlayer.m_mbMedia">
	<summary>
 Member variable to hold the media (video file)
 </summary>
</member><member name="F:VideoMiner.frmVideoPlayer.m_intFramesToSkip">
	<summary>
 The number of frames to skip when incrementally stepping forward through frames
 </summary>
</member><member name="F:VideoMiner.frmVideoPlayer.m_pnlTransparentPanel">
	<summary>
 Member variable to hold the transparent panel used to overlay the Vlc.DotNet control so that the user
 can click on the video to toggle play/pause
 </summary>
</member><member name="M:VideoMiner.frmVideoPlayer.#ctor(System.String,System.Int32)">
	<summary>
 Default constructor. The label time format will be the default. Current time and Duration are set to zero.
 </summary>
	<remarks></remarks>
</member><member name="M:VideoMiner.frmVideoPlayer.#ctor(System.String,System.String,System.Int32)">
	<summary>
 Constructor with custom time format string. Should look something like this: "{0:D2}:{1:D2}:{2:D2}.{3:D2}"
 Current time and Duration are set to zero.
 </summary>
	<param name="videoTimeFormat"></param>
	<remarks></remarks>
</member><member name="P:VideoMiner.frmVideoPlayer.Position">
	<summary>
 This property contains the position of the currently loaded video.
 </summary>
	<value>Between 0.0 and 1.0</value>
	<returns>A number of type Single</returns>
</member><member name="P:VideoMiner.frmVideoPlayer.IsPlaying">
	<summary>
 This property is readonly and contains a boolean which is True if the media state of the VLC.dotnet control is Vlc.DotNet.Core.Interops.Signatures.LibVlc.Media.States.Playing
 </summary>
	<returns>True or False</returns>
</member><member name="P:VideoMiner.frmVideoPlayer.IsStopped">
	<summary>
 This property is readonly and contains a boolean which is True if the media state of the VLC.dotnet control is Vlc.DotNet.Core.Interops.Signatures.LibVlc.Media.States.Stopped
 </summary>
	<returns>True or False</returns>
</member><member name="P:VideoMiner.frmVideoPlayer.IsPaused">
	<summary>
 This property is readonly and contains a boolean which is True if the media state of the VLC.dotnet control is Vlc.DotNet.Core.Interops.Signatures.LibVlc.Media.States.Paused
 </summary>
	<returns>True or False</returns>
</member><member name="P:VideoMiner.frmVideoPlayer.IsEndOfVideo">
	<summary>
 This property contains a boolean which is True if the media has reached the end of the video
 </summary>
	<returns>True or False</returns>
</member><member name="P:VideoMiner.frmVideoPlayer.CurrentVideoTimeFormatted">
	<summary>
 This property is readonly and returns a formatted string representing the time at the current position of the video.
 The formatting string is defined in the constructor (either default or custom).
 </summary>
	<returns>System.Timespan</returns>
	<remarks></remarks>
</member><member name="P:VideoMiner.frmVideoPlayer.CurrentVideoTime">
	<summary>
 This property is readonly and returns a System.Timespan object representing the time at the current position of the video.
 </summary>
	<returns>System.Timespan</returns>
	<remarks></remarks>
</member><member name="P:VideoMiner.frmVideoPlayer.FPS">
	<summary>
 This property is readonly and contains a number of type 'Single' which represents the Frames per Second for the video.
 </summary>
	<returns>Single number</returns>
	<remarks> Note this almost always returns 0 so it's use is limited</remarks>
</member><member name="P:VideoMiner.frmVideoPlayer.Rate">
	<summary>
 This property contains a number of type 'Double' which represents the play rate for the video.
 For normal playback this will be 1.0. For double spped, it will be 2.0
 </summary>
	<value>Double number greater or equal to 0.0</value>
	<returns>Double number</returns>
	<remarks></remarks>
</member><member name="P:VideoMiner.frmVideoPlayer.Filename">
	<summary>
 This property contains a 'String' which represents the filename for the video.
 </summary>
	<returns>String</returns>
</member><member name="E:VideoMiner.frmVideoPlayer.PauseEvent">
	<summary>
 This event is triggered when the user pauses the video from within this form.
 </summary>
</member><member name="E:VideoMiner.frmVideoPlayer.PlayEvent">
	<summary>
 This event is triggered when the user plays the video from within this form.
 </summary>
</member><member name="E:VideoMiner.frmVideoPlayer.StopEvent">
	<summary>
 This event is triggered when the user stops the video from within this form.
 </summary>
</member><member name="E:VideoMiner.frmVideoPlayer.VideoEndedEvent">
	<summary>
 This event is triggered when the video has ended.
 </summary>
</member><member name="E:VideoMiner.frmVideoPlayer.ClosingEvent">
	<summary>
 This event is triggered when the frmVideoPlayer form is closed by clicking the 'X' top right of the window.
 </summary>
</member><member name="E:VideoMiner.frmVideoPlayer.TimerTickEvent">
	<summary>
 This event is triggered when the timer ticks. It is used to send a signal so that
 the parent will always have access to the correct data (current time) from the video.
 </summary>
</member><member name="E:VideoMiner.frmVideoPlayer.RightArrowPressedEvent">
	<summary>
 If the Right arrow key is pressed inside this form, this event will be raised
 </summary>
	<remarks></remarks>
</member><member name="M:VideoMiner.frmVideoPlayer.frmVideoPlayer_Load(System.Object,System.EventArgs)">
	<summary>
 Loads the fmrVideoPlayer form. All member variables are initialized, and the video file is opened as a new Vlc.DotNet.Core.Medias.PathMedia object.
 A System.Timer is started to generate update events every 500ms.
 </summary>
	<param name="sender">System.Object</param>
	<param name="e">System.EventArgs</param>
</member><member name="M:VideoMiner.frmVideoPlayer.frmVideoPlayer_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
 Unloads the frmVideoPLayer form. The player and timer are stopped and the ClosingEvent is fired
 </summary>
	<param name="sender">System.Object</param>
	<param name="e">System.Windows.Forms.FormClosingEventArgs</param>
</member><member name="M:VideoMiner.frmVideoPlayer.playVideo">
	<summary>
 Plays the video and change the picturebox icon to reflect this. Fires the PlayEvent.
 </summary>
	<returns>True or False for success. False is returned if the media was not loaded correctly or an exception was thrown</returns>
	<remarks>If IsEndOfVideo is True and either IsStopped or IsPaused is True, 
 that means that the player is at the end and the play request will attempt to reset the player to the beginning</remarks>
</member><member name="M:VideoMiner.frmVideoPlayer.pauseVideo">
	<summary>
 Pause the video and change the picturebox icon to reflect this. Fires the PauseEvent.
 </summary>
	<returns>True or False for success. Only returns False if an exception is thrown</returns>
</member><member name="M:VideoMiner.frmVideoPlayer.stopVideo">
	<summary>
 Stop the video and change the picturebox icon to reflect this. Fires the StopEvent.
 </summary>
	<returns>True or False for success. Only returns False if an exception is thrown</returns>
</member><member name="M:VideoMiner.frmVideoPlayer.tmrVideo_Tick(System.Object,System.EventArgs)">
	<summary>
 Handles the System.timer tick event. If it is the first one, set up the duration label (the duration cannot be read until the video has started playing).
 If the video has reached it's duration, fire EndedEvent. At all other times, update the label for the current time that the video has reached.
 </summary>
	<param name="sender">System.Object</param>
	<param name="e">System.EventArgs</param>
	<remarks>On the first tick, adds a transparent panel to allow user clicks on the video, since the Vlc.DotNet control does not allow it.</remarks>
</member><member name="M:VideoMiner.frmVideoPlayer.stepForward(System.Object)">
	<summary>
 Step forward a number of frames in the video and adjust player controls accordingly
 </summary>
	<param name="intFramesToSkip">Number of frames to skip, typically between 50 and 1000</param>
	<returns>Boolean if the stepping succeeded</returns>
	<remarks>This is highly dependent on the Vlc.DotNet control and can be buggy depending on the filetype</remarks>
</member><member name="M:VideoMiner.frmVideoPlayer.getCurrentTime">
	<summary>
 Get the current time from the Position property and the duration of the video.
 </summary>
	<returns>A new System.Timespan object</returns>
	<remarks>Multiplies the current position (which is between 0 and 1) by the duration of the video and
 converts that to a Timespan object.</remarks>
</member><member name="M:VideoMiner.frmVideoPlayer.trkCurrentPosition_MovePointer(System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary>
 This mouse handler handles both MouseDown and MouseMove Events for the trackbar. If you press on the trackbar and move it,
 the video will pause,then seek to that spot and remain paused.
 </summary>
	<param name="sender">System.Object</param>
	<param name="e">System.Windows.Forms.MouseEventArgs</param>
</member><member name="M:VideoMiner.frmVideoPlayer.trkCurrentPosition_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary>
 The trackbar MouseUp event just pauses the video.
 This is here to ensure the video remains paused after seeking with the trackbar
 </summary>
	<param name="sender">System.Object</param>
	<param name="e">System.Windows.Forms.MouseEventArgs</param>
</member><member name="M:VideoMiner.frmVideoPlayer.m_pnlTransparentPanel_MouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary>
 This handles the user clicking on the video by using a transparent panel overlaid on the video.
 The video will toggle between paused and playing. 
 The Vlc.DotNet control does not capture MouseClick Events on its own so the transparent panel was needed.
 </summary>
	<param name="sender">System.Object</param>
	<param name="e">System.Windows.Forms.MouseEventArgs</param>
	<remarks>If the user clicks the right mouse button, a simple help dialog will pop up</remarks>
</member><member name="M:VideoMiner.frmVideoPlayer.videoContextMenuChoice(System.Object,System.EventArgs)">
	<summary>
 This is the help dialog that appears when the user clicks the right mouse button in the video window.
 </summary>
	<param name="sender">System.Object</param>
	<param name="e">System.EventArgs</param>
</member><member name="M:VideoMiner.frmVideoPlayer.plyrVideo_Ended">
	<summary>
 This handles the Event 'EndReached' fired by the Vlc.DotNet control.
 </summary>
</member><member name="M:VideoMiner.frmVideoPlayer.endOfVideo">
	<summary>
 The end of the video has been reached. Do some updating on the form and raise the VideoEnded event.
 </summary>
	<remarks></remarks>
</member><member name="M:VideoMiner.frmVideoPlayer.getFormattedCurrentVideoTimeString">
	<summary>
 Returns a formatted string for the current video time
 </summary>
	<returns>A formatted string or an unformatted string if an exception was thrown</returns>
	<remarks></remarks>
</member><member name="M:VideoMiner.frmVideoPlayer.getFormattedDurationString">
	<summary>
 Returns a formatted string for the duration video time
 </summary>
	<returns>A formatted string or an unformatted string if an exception was thrown</returns>
	<remarks></remarks>
</member><member name="M:VideoMiner.frmVideoPlayer.lblDuration_TextChanged(System.Object,System.EventArgs)">
	<summary>
 Handles the case when extra decimal points are being shown
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>Works in tandem with lblDuration_Resize(sender As System.Object, e As System.EventArgs) Handles lblDuration.Resize</remarks>
</member><member name="M:VideoMiner.frmVideoPlayer.lblDuration_Resize(System.Object,System.EventArgs)">
	<summary>
 When the duration label automatically resizes due to extra decimal points being shown,
 this will make it grow left so that it remains looking good.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>Works in tandem with lblDuration_TextChanged(sender As System.Object, e As System.EventArgs) Handles lblDuration.TextChanged</remarks>
</member><member name="M:VideoMiner.frmVideoPlayer.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
	<summary>
 Required to override the default behaviour of the arrow keypresses in the form
 </summary>
	<param name="msg"></param>
	<param name="keyData"></param>
	<returns>True if the right arrow was pressed</returns>
	<remarks>Raises the RightArrowPressedEvent</remarks>
</member><member name="T:VideoMiner.frmVideoPlayer">
	<summary>
 The frmVideoPlayer class provides a form with an instance of the VLC.dotnet control, a trackbar to show the position of the video, a label for the current position,
 a label for the duration of the video clip, and a picturebox which shows what is currently happening with the video (playing, stopped, paused).
 </summary>
	<remarks></remarks>
</member><member name="T:VideoMiner.frmSetTime.WhichTimeEnum">
	<summary>
 Used to keep track of which time the m_tsUserTime variable is set to
 </summary>
</member><member name="F:VideoMiner.frmSetTime.m_enumWhichTime">
	<summary>
 Keeps track of which time the m_tsUserTime variabel is set to
 </summary>
</member><member name="F:VideoMiner.frmSetTime.m_tsUserTime">
	<summary>
 Stores the Timespan object representing the user time
 </summary>
</member><member name="P:VideoMiner.frmSetTime.WhichTime">
	<summary>
 One of the WhichTimeEnum enumeration values, representing which type of time is currently in use
 </summary>
</member><member name="P:VideoMiner.frmSetTime.UserTime">
	<summary>
 UserTime is a TimeSpan property representing the user time
 </summary>
</member><member name="P:VideoMiner.frmSetTime.TimeSource">
	<summary>
 The Timesource in use, one of the values in the WhichTimeEnum enumerationm
 </summary>
</member><member name="E:VideoMiner.frmSetTime.TimeChanged">
	<summary>
 When the user clicks the 'OK' button this event is raised
 </summary>
</member><member name="E:VideoMiner.frmSetTime.TimeSourceChange">
	<summary>
 Signal that the user has requested a time source change, eg. from COMPUTER to GPS
 </summary>
</member><member name="E:VideoMiner.frmSetTime.RequestGPSTime">
	<summary>
 When the user clicks the 'GPS Time' radiobutton this event is raised
 </summary>
</member><member name="E:VideoMiner.frmSetTime.RequestContinueTime">
	<summary>
 When the user clicks the 'Continue from Last Clip' radiobutton this event is raised
 </summary>
</member><member name="M:VideoMiner.frmSetTime.#ctor">
	<summary>
 Default constructor
 </summary>
	<remarks>Sets the UserTime property to TimeSpan.Zero</remarks>
</member><member name="M:VideoMiner.frmSetTime.#ctor(System.TimeSpan)">
	<summary>
 Constructor
 </summary>
	<param name="tsUserTime">Sets the UserTime property in the constructor to tsUserTime</param>
</member><member name="M:VideoMiner.frmSetTime.frmSetTime_Load(System.Object,System.EventArgs)">
	<summary>
 Load the form, set the time textbox up to show the current user time.
 </summary>
</member><member name="M:VideoMiner.frmSetTime.cmdOk_Click(System.Object,System.EventArgs)">
	<summary>
 Handles when the user clicks the 'OK' button.
 </summary>
	<remarks></remarks>
</member><member name="M:VideoMiner.frmSetTime.ChangeSource(VideoMiner.frmSetTime.WhichTimeEnum)">
	<summary>
 Change the time source type. Also set the textbox background, font, and value
 </summary>
</member><member name="M:VideoMiner.frmSetTime.setTextTime">
	<summary>
 Set the text in the Time TextBox to be the hours, minutes, seconds, and milliseconds (rounded to 2 decimal places) of the current time
 </summary>
</member><member name="M:VideoMiner.frmSetTime.getTextTime">
	<summary>
 Stores the text time as written in the TextBox into a member variable stored as a Timespan object.
 </summary>
</member><member name="M:VideoMiner.frmSetTime.rbManualTime_Click(System.Object,System.EventArgs)">
	<summary>
 Handle the click of the radiobutton to allow the user to manually set the time
 </summary>
</member><member name="M:VideoMiner.frmSetTime.rbVideoTime_Click(System.Object,System.EventArgs)">
	<summary>
 Handle the click of the button to set the time to zero
 </summary>
</member><member name="M:VideoMiner.frmSetTime.rbComputerTime_Click(System.Object,System.EventArgs)">
	<summary>
 Handle the click of the button to set the time to the current time on this computer
 </summary>
</member><member name="M:VideoMiner.frmSetTime.rbGPSTime_Click(System.Object,System.EventArgs)">
	<summary>
 Handle the click of the button to set the time to the GPS connection's time
 </summary>
</member><member name="M:VideoMiner.frmSetTime.rbContinueTime_Click(System.Object,System.EventArgs)">
	<summary>
 Handle the click of the button to set the time to the GPS connection's time
 </summary>
</member><member name="M:VideoMiner.frmSetTime.validateTimeEntry">
	<summary>
 Check the user input to make sure it is a valid time. Returns True if valid, False otherwise
 </summary>
</member><member name="M:VideoMiner.frmSetTime.processOK">
	<summary>
 Processes a click of the OK button or when the Enter key is pressed. Verifies that the time in the textbox it of correct format and if so, Raises the TimeChanged Event before hiding the form.
 </summary>
</member><member name="F:VideoMiner.frmRareSpeciesLookup.m_species_table">
	<summary>
 Holds the data from queries issued to the database
 </summary>
</member><member name="F:VideoMiner.frmRareSpeciesLookup.m_speciesName">
	<summary>
 The currently selected species name
 </summary>
</member><member name="F:VideoMiner.frmRareSpeciesLookup.m_speciesScienceName">
	<summary>
 The currently selected species scientific name
 </summary>
</member><member name="F:VideoMiner.frmRareSpeciesLookup.m_speciesCode">
	<summary>
 The currently selected species code
 </summary>
</member><member name="F:VideoMiner.frmRareSpeciesLookup.m_speciesTaxCode">
	<summary>
 The currently selected species' taxonomic level code
 </summary>
</member><member name="P:VideoMiner.frmRareSpeciesLookup.SpeciesName">
	<summary>
 Returns the currently selected species' common name. Will return null string if there is no selection.
 </summary>
</member><member name="P:VideoMiner.frmRareSpeciesLookup.SpeciesScienceName">
	<summary>
 Returns the currently selected species' scientific name. Will return null string if there is no selection.
 </summary>
</member><member name="P:VideoMiner.frmRareSpeciesLookup.SpeciesCode">
	<summary>
 Returns the currently selected species' species code. Will return null string if there is no selection.
 </summary>
</member><member name="M:VideoMiner.frmRareSpeciesLookup.PopulateComboBox(System.Windows.Forms.ComboBox@,System.Data.DataTable@)">
	<summary>
 Fill the combobox with a given column's contents
 </summary>
	<param name="cboBox">A reference to the combobox to populate</param>
	<param name="dataTable">A single column data table containing values that you want to fill the combobox with</param>
</member><member name="M:VideoMiner.frmRareSpeciesLookup.ClearControls">
	<summary>
 Clears out all controls of their current values and resets member variables to a freshly loaded default state.
 </summary>
</member><member name="M:VideoMiner.frmRareSpeciesLookup.cboCommonName_SelectionChangeCommitted(System.Object,System.EventArgs)">
	<summary>
 Whenever the selected index chages for the Common Name, set the other controls to match the Common Name.
 </summary>
</member><member name="M:VideoMiner.frmRareSpeciesLookup.cboScientificName_SelectionChangeCommitted(System.Object,System.EventArgs)">
	<summary>
 Whenever the selected index chages for the Common Name, set the other controls to match the Common Name.
 </summary>
</member><member name="M:VideoMiner.frmRareSpeciesLookup.cmdOK_Click(System.Object,System.EventArgs)">
	<summary>
 If the user has selected a species, this will fire an event telling the main form to record a record in the data table in the database.
 </summary>
</member><member name="M:VideoMiner.frmRareSpeciesLookup.cmdCancel_Click(System.Object,System.EventArgs)">
	<summary>
 If user presses the cancel button, just hide the form since it is modeless.
 </summary>
</member><member name="M:VideoMiner.frmRareSpeciesLookup.me_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
 Capture the event when the user presses the 'X' button top right. Instead of closing the form, just hide it.
 </summary>
</member><member name="M:VideoMiner.frmRareSpeciesLookup.species_entry_event(System.Object,System.EventArgs)">
	<summary>
 Tell Videominer that the user widhes to submit a database record addition for the species listed.
 </summary>
</member><member name="P:VideoMiner.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.Decrease_Icon">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.FastForward_Icon">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.FastForward_Icon_Inverse">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.FastForward3_Icon_Inverse">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.FastForward4_Icon_Inverse">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.Increase_Icon">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.Next_Icon">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.Pause_Icon">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.Pause_Icon_Inverse">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.Play_Icon">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.Play_Icon_Inverse">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.Previous_Icon">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.Rewind_Icon">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.Rewind_Icon_Inverse">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.Rewind3_Icon_Inverse">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.Rewind4_Icon_Inverse">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.ScreenCapture">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.ScreenCapture_">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.Stop_Icon">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.Stop_Icon_Inverse">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:VideoMiner.My.Resources.Resources.VideoMiner_exe">
	<summary>
  Looks up a localized resource of type System.Byte[].
</summary>
</member><member name="T:VideoMiner.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="E:VideoMiner.frmStringDataViewer.ShowChosenStringOnlyEvent">
	<summary>
 Signal the calling class that you want to only be sent data for whatever string was chosen in that class.
 </summary>
</member><member name="E:VideoMiner.frmStringDataViewer.ShowAllStringsEvent">
	<summary>
 Signal the calling class that you want to be sent data for all incoming NMEA strings.
 </summary>
	<remarks></remarks>
</member><member name="M:VideoMiner.frmStringDataViewer.ClearText">
	<summary>
 Clear the textbox of all data.
 </summary>
</member><member name="M:VideoMiner.frmStringDataViewer.AppendString(System.String)">
	<summary>
 Append the string to the textbox
 </summary>
	<remarks>Only appends if the form is visible and not "paused"</remarks>
</member><member name="F:VideoMiner.frmEditSpecies.m_speciesName">
	<summary>
 The currently selected species name
 </summary>
</member><member name="F:VideoMiner.frmEditSpecies.m_speciesScienceName">
	<summary>
 The currently selected species scientific name
 </summary>
</member><member name="F:VideoMiner.frmEditSpecies.m_speciesCode">
	<summary>
 The currently selected species code
 </summary>
</member><member name="F:VideoMiner.frmEditSpecies.m_speciesTaxCode">
	<summary>
 The currently selected species' taxonomic level code
 </summary>
</member><member name="F:VideoMiner.frmEditSpecies.m_buttonColor">
	<summary>
 The currently selected button color
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.frmEditSpecies.m_button_text">
	<summary>
 The button text to be used for the species code
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.frmEditSpecies.m_keyboard_shortcut">
	<summary>
 The text representing a .NET keyboard shortcut
 </summary>
	<remarks></remarks>
</member><member name="P:VideoMiner.frmEditSpecies.SpeciesName">
	<summary>
 Returns the currently selected species' common name. Will return null string if there is no selection.
 </summary>
</member><member name="P:VideoMiner.frmEditSpecies.SpeciesScienceName">
	<summary>
 Returns the currently selected species' scientific name. Will return null string if there is no selection.
 </summary>
</member><member name="P:VideoMiner.frmEditSpecies.SpeciesCode">
	<summary>
 Returns the currently selected species' species code. Will return null string if there is no selection.
 </summary>
</member><member name="P:VideoMiner.frmEditSpecies.SpeciesTaxCode">
	<summary>
 Returns the currently selected species' taxonomy family code. Will return null string if there is no selection.
 </summary>
</member><member name="P:VideoMiner.frmEditSpecies.ButtonColor">
	<summary>
 Returns the currently selected button color. Will return null string if there is no selection.
 </summary>
</member><member name="P:VideoMiner.frmEditSpecies.ButtonText">
	<summary>
 Returns the currently selected button color. Will return null string if there is no selection.
 </summary>
</member><member name="P:VideoMiner.frmEditSpecies.KeyboardShortcut">
	<summary>
 Returns a text representation of the current keyboard shortcut for this species. Will return null string if there isn't one set up.
 </summary>
</member><member name="M:VideoMiner.frmEditSpecies.#ctor">
	<summary>
 In this constructor, the various comboboxes will be populated so that it only happens once. There are over 7000 records in the species table and this will speed things up in the program.
 </summary>
</member><member name="M:VideoMiner.frmEditSpecies.PopulateComboBox(System.Windows.Forms.ComboBox@,System.Data.DataTable@)">
	<summary>
 Fill the combobox with a given column's contents
 </summary>
	<param name="cboBox">A reference to the combobox to populate</param>
	<param name="dataTable">A single column data table containing values that you want to fill the combobox with</param>
</member><member name="M:VideoMiner.frmEditSpecies.cboButtonColors_DrawItem(System.Object,System.Windows.Forms.DrawItemEventArgs)">
	<summary>
 Custom draw function for the button colors combobox so that the color names appear as the colors themselves.
 </summary>
</member><member name="M:VideoMiner.frmEditSpecies.cmdOk_Click(System.Object,System.EventArgs)">
	<summary>
 When user presses OK, either add a new record to the database table videominer_species_buttons or change one already present.
 </summary>
</member><member name="M:VideoMiner.frmEditSpecies.GetNextSequenceId">
	<summary>
 Get the next unique ID from the species buttons table so that the new button can be inserted properly into the database table.
 </summary>
</member><member name="M:VideoMiner.frmEditSpecies.cboCommonName_SelectionChangeCommitted(System.Object,System.EventArgs)">
	<summary>
 Whenever the selected index chages for the Common Name, set the other controls to match the Common Name.
 </summary>
</member><member name="M:VideoMiner.frmEditSpecies.cboScientificName_SelectionChangeCommitted(System.Object,System.EventArgs)">
	<summary>
 Whenever the selected index chages for the Common Name, set the other controls to match the Common Name.
 </summary>
</member><member name="M:VideoMiner.frmEditSpecies.cboButtonColor_SelectionChangeCommitted(System.Object,System.EventArgs)">
	<summary>
 Handles the case when the user changes the selection in the Button Colors combobox. Simply sets a member variable when changed.
 If the selection is null, DarkSlateGray will be used as the default
 </summary>
</member><member name="M:VideoMiner.frmEditSpecies.FillControlsUsingSpeciesCode">
	<summary>
 Fills the controls based on the current species code. Usually used from a parent form when it wants to populate the fields automatically with a supplied
 species code value.
 </summary>
</member><member name="M:VideoMiner.frmEditSpecies.ClearControls">
	<summary>
 Clears out all controls of their current values and resets member variables to a freshly loaded default state.
 </summary>
</member><member name="M:VideoMiner.frmEditSpecies.me_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
 Capture the event when the user presses the 'X' button top right. Instead of closing the form, just hide it.
 </summary>
</member><member name="M:VideoMiner.frmEditSpecies.txtSpeciesBtnTxt_TextChanged(System.Object,System.EventArgs)">
	<summary>
 If the user types custom text into the button text texbox, this handles that and sets the appropriate member variable.
 </summary>
</member><member name="T:VideoMiner.frmEditSpecies">
	<summary>
 This form class allows the user to add a new species to the database table 'videominer_species_buttons' or to edit properties of an existing species
 </summary>
</member><member name="M:VideoMiner.Point.GetPoint">
	<summary>
 Get a point location from a NMEA string
 </summary>
	<returns>True or False</returns>
	<remarks></remarks>
</member><member name="F:VideoMiner.frmSpeciesEvent.m_speciesName">
	<summary>
 Holds the species name
 </summary>
</member><member name="F:VideoMiner.frmSpeciesEvent.m_speciesCode">
	<summary>
 Holds the species code
 </summary>
</member><member name="F:VideoMiner.frmSpeciesEvent.m_range">
	<summary>
 Holds the currently entered range
 </summary>
</member><member name="F:VideoMiner.frmSpeciesEvent.m_side">
	<summary>
 Holds the currently selected Side code as found in the database table lu_observed_side
 </summary>
</member><member name="F:VideoMiner.frmSpeciesEvent.m_IDConfidence">
	<summary>
 Holds the currently selected ConfidenceID code as found in the database table lu_confidence_ids
 </summary>
</member><member name="F:VideoMiner.frmSpeciesEvent.m_Abundance">
	<summary>
 Holds the currently selected Abundance code as found in the database table lu_acfor_scale
 </summary>
</member><member name="F:VideoMiner.frmSpeciesEvent.m_Count">
	<summary>
 Holds the currently entered count
 </summary>
</member><member name="F:VideoMiner.frmSpeciesEvent.m_Height">
	<summary>
 Holds the currently entered height
 </summary>
</member><member name="F:VideoMiner.frmSpeciesEvent.m_Width">
	<summary>
 Holds the currently entered width
 </summary>
</member><member name="F:VideoMiner.frmSpeciesEvent.m_Length">
	<summary>
 Holds the currently entered length of the specimen
 </summary>
</member><member name="F:VideoMiner.frmSpeciesEvent.m_Comments">
	<summary>
 Holds the currently entered comments
 </summary>
</member><member name="F:VideoMiner.frmSpeciesEvent.m_tuple">
	<summary>
 A tuple for the Dictionary object, m_dict.
 </summary>
</member><member name="F:VideoMiner.frmSpeciesEvent.m_dict">
	<summary>
 Dictionary of key/value pairs that hold the currently selected data for this species event.
 The first parameter is the name of the field in the database table lu_data. The tuple is a triplet of data code (from lu_data_codes),
 the data value to be inserted, and a boolean for whether or not the item was the one pressed (in case there are more than one in the dictionary).
 </summary>
</member><member name="M:VideoMiner.frmSpeciesEvent.GetNextSequenceId">
	<summary>
 Get the next unique ID from the species buttons table so that the new button can be inserted properly into the database table.
 </summary>
</member><member name="M:VideoMiner.frmSpeciesEvent.pnlSpeciesEvent_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
	<summary>
  When the SpeciesEventForm is displayed, draw a red arc at the bottom of the form with an
  attatched red line going to the top of the form. This line helps a user visualize the center line,
  and ranges to the left or right of the center line.
 </summary>
</member><member name="M:VideoMiner.frmSpeciesEvent.Acknowledge(System.String)">
	<summary>
 Acknowledge that everything is verified by setting all member variables and building the dictionary. An event will be fired to let the parents know we are ready.
 </summary>
</member><member name="M:VideoMiner.frmSpeciesEvent.buildDictionary">
	<summary>
 Build the dictionary of key/value pairs for the data the user chose.
 </summary>
</member><member name="M:VideoMiner.frmSpeciesEvent.selectSpeciesInCombobox">
	<summary>
 Resets the species combobox back to it's correct default species name
 </summary>
	<remarks></remarks>
</member><member name="M:VideoMiner.frmSpeciesEvent.formShown(System.Object,System.EventArgs)">
	<summary>
 This code is run everytime the form's show function is called. It resets the species combobox back to it's correct default species name
 </summary>
</member><member name="M:VideoMiner.frmSpeciesEvent.txt_Validating_NonNull(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 Validate that the count texbox only has digits in it (an integer). And it must have at least one digit (no empty strings).
 </summary>
</member><member name="M:VideoMiner.frmSpeciesEvent.txt_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 Validate that the non-count texboxes only have empty strings, integers, or real numbers.
 </summary>
</member><member name="M:VideoMiner.frmSpeciesEvent.btnCancel_Click(System.Object,System.EventArgs)">
	<summary>
 When user presses cancel, hide the form instead of closing it. It is created only once and needs to remain persistent.
 </summary>
</member><member name="M:VideoMiner.frmSpeciesEvent.me_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
 Capture the event when the user presses the 'X' button top right. Instead of closing the form, just hide it.
 </summary>
</member><member name="M:VideoMiner.frmSpeciesEvent.cboSide_SelectionChangeCommitted(System.Object,System.EventArgs)">
	<summary>
 If the user selects "On Center", disable the Range textbox and remove its value. If user selects "Port" or "Starboard",
 enable the Range textbox.
 </summary>
</member><member name="F:VideoMiner.DynamicButton.UNINITIALIZED_DATA_VALUE">
	<summary>
 The default, uninitialized value for the DataValue property
 </summary>
	<remarks>This is set in the constructors</remarks>
</member><member name="F:VideoMiner.DynamicButton.m_control_code">
	<summary>
 A unique key so that this DynamicButton can be linked to a corresponding DynamicTextbox later.
 One and only one DynamicTextbox will have the same control code as this.
 </summary>
</member><member name="F:VideoMiner.DynamicButton.m_db_table_name">
	<summary>
 Name of the MS Access table associated with this button
 </summary>
</member><member name="F:VideoMiner.DynamicButton.m_button_text">
	<summary>
 Text to appear on the button
 </summary>
</member><member name="F:VideoMiner.DynamicButton.m_button_code">
	<summary>
 Code for the button. This may not be set if the button type is for a data table.
 </summary>
</member><member name="F:VideoMiner.DynamicButton.m_button_code_name">
	<summary>
 Name for the button code. This may not be set if the button type is for a data table.
 </summary>
</member><member name="F:VideoMiner.DynamicButton.m_keyboard_shortcut">
	<summary>
 A String representing a keyboard shortcut. This is what can be pressed to trigger a Click event on the button.
 </summary>
</member><member name="F:VideoMiner.DynamicButton.m_data_code">
	<summary>
 Data code for this button as found in the lu_data_codes table.
 This is NOT the code chosen by the user in the table view, this is the
 code for this particular table.
 </summary>
</member><member name="F:VideoMiner.DynamicButton.m_data_code_name">
	<summary>
 Name of the data code (description) as found in the lu_data_codes table.
 This is NOT the code chosen by the user in the table view, this is the
 code for this particular table.
 </summary>
</member><member name="F:VideoMiner.DynamicButton.m_data_code_description">
	<summary>
 A description of the data code
 </summary>
</member><member name="F:VideoMiner.DynamicButton.m_data_value">
	<summary>
 The value of the chosen data, i.e.e from row selection in a table, entry such as Field of View, or from clicking a species event button.
 It must be a string so that "NULL" can be passed to the SQL query if it was not chosen to be part of the query.
 </summary>
</member><member name="F:VideoMiner.DynamicButton.m_data_table">
	<summary>
 Table of data found in the m_db_table_name table in the MS Access database. This may not be set if the button type is for a species.
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.DynamicButton.m_table_view">
	<summary>
 The table view of the m_data_table. This may not be set if the button type is for a species.
 </summary>
</member><member name="F:VideoMiner.DynamicButton.m_abundance_table">
	<summary>
 The table view of the abundance table. This may not be set if the button type is for a species.
 </summary>
</member><member name="F:VideoMiner.DynamicButton.m_current_data_code">
	<summary>
 Currently selected code for the variable that m_table_name represents.
 This is changed when the user selects a new row in the underlying table view form.     
 </summary>
</member><member name="F:VideoMiner.DynamicButton.m_current_data_code_name">
	<summary>
 Currently selected code name for the variable that m_table_name represents.
 This is changed when the user selects a new row in the underlying table view form.     
 </summary>
</member><member name="F:VideoMiner.DynamicButton.m_current_comment">
	<summary>
 Currently entered comment in the frmTableView
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.DynamicButton.m_which_type">
	<summary>
 Holds the enumeration type for this instance
 </summary>
</member><member name="P:VideoMiner.DynamicButton.DataCode">
	<summary>
 Data code used for table-based data. e.g. table lu_survey_mode is associated with data code 9 in the lu_data_codes table
 </summary>
</member><member name="P:VideoMiner.DynamicButton.WhichType">
	<summary>
 Enumeration type for this instance. See WhichTypeEnum for descriptions.
 </summary>
</member><member name="E:VideoMiner.DynamicButton.DataChanged">
	<summary>
 Fired when the button data has changed.
 </summary>
</member><member name="E:VideoMiner.DynamicButton.NewSpeciesEntryEvent">
	<summary>
 This event will propagate or bubble up the same event raised from within the frmSpeciesEvent class.
 </summary>
</member><member name="E:VideoMiner.DynamicButton.SignalVideoPause">
	<summary>
 Signals the parent that a button has been pressed and we request that the video be paused while data entry takes place.
 </summary>
</member><member name="M:VideoMiner.DynamicButton.#ctor(System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32)">
	<summary>
 Creates the object, for the case in which the button refers to a database code table.
 </summary>
	<param name="buttonText">Text to appear on the button</param>
	<param name="tableName">Name of the MS Access database table </param>
	<param name="dataCode">Code that is in the database table for this button</param>
	<param name="dataCodeName">Name of the code that is in the database table for this button</param>
	<param name="buttonColor">The microsoft color for this button's text (e.g. "DarkBlue")</param>
	<param name="buttonFont">The font to use for this button (e.g. "Microsoft Sans Serif")</param>
	<param name="buttonTextSize">The font size to use for this button's text (in pts)</param>
	<remarks></remarks>
</member><member name="M:VideoMiner.DynamicButton.#ctor(System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32)">
	<summary>
 Creates the object, for the case in which the button refers to a singular datum (such as species code).
 </summary>
	<param name="buttonText">Text to appear on the button</param>
	<param name="buttonCode">Code for the button. If singulars button, this is the (species) code</param>
	<param name="buttonCodeName">Name for the button code, (e.g. SpeciesID)</param>
	<param name="dataCode">Data Code that is in the database table for this button type</param>
	<param name="buttonColor">The microsoft color for this button's text (e.g. "DarkBlue")</param>
	<param name="keyboardShortcut">Keyboard shortcut that will run the Click event for this button</param>
	<param name="buttonFont">The font to use for this button (e.g. "Microsoft Sans Serif")</param>
	<param name="buttonTextSize">The font size to use for this button's text (in pts)</param>
	<remarks></remarks>
</member><member name="M:VideoMiner.DynamicButton.ShowDataForm">
	<summary>
 Show the species event form for the current species.
 </summary>
</member><member name="M:VideoMiner.DynamicButton.RecordQuick(System.String)">
	<summary>
 Record count value to the frmSpeciesEvent and raise the DataChangedEvent. Used for quick entry case where the whole form is not shown and just a count is required.
 </summary>
</member><member name="M:VideoMiner.DynamicButton.dataHasChanged(System.String)">
	<summary>
 Handle the changing by the user of the lookup table code found in frmTableView, and fire an event to the parent.
 </summary>
	<param name="comment">The comment supplied by the user. Can be the empty string.</param>
</member><member name="M:VideoMiner.DynamicButton.clearData">
	<summary>
 Handle the clearing of the data field in the table by resetting the DataCode and DataComment to Nothing and
 firing an event to signal the parent.
 </summary>
</member><member name="M:VideoMiner.DynamicButton.clickMe(System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary>
 If this button is Ctrl-clicked, the selection will be cleared.
 </summary>
</member><member name="M:VideoMiner.DynamicButton.myLocationChanged(System.Object,System.EventArgs)">
	<summary>
 Places the table view forms in the center of the screen.
 </summary>
</member><member name="M:VideoMiner.DynamicButton.new_species_entry_handler(System.Object,System.EventArgs)">
	<summary>
 Handles the event request to insert a new entry into the database. The species event form which corresponds to this button has been populated, validated, and the values are ready to be extracted.
 This just bubbles the event up to the parent.
 </summary>
	<remarks></remarks>
</member><member name="T:VideoMiner.DynamicButton">
	<summary>
 A Videominer dynamic button. This button extends a regular button by holding the database table name,
 an instance of the DataTable, the current data code, and the code name.
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.DynamicTextbox.m_control_code">
	<summary>
 A unique key so that this DynamicTextbox can be linked to a corresponding DynamicButton later.
 One and only one DynamicButton will have the same control code as this.
 </summary>
</member><member name="M:VideoMiner.frmProjectNames.getProjectName">
	<summary>
 Return the name of the currently chosen project name
 </summary>
</member><member name="M:VideoMiner.frmProjectNames.getProjectNameToDelete">
	<summary>
 Return the name of the currently chosen project name to be deleted
 </summary>
</member><member name="M:VideoMiner.frmProjectNames.PopulateProjectList(Microsoft.VisualBasic.Collection)">
	<summary>
 Place all names in the supplied list Collection into the ListBox.
 Refreshes the list everytime it is called, i.e. clears the list and rebuilds
 it based on the list Collection
 </summary>
</member><member name="M:VideoMiner.frmProjectNames.lstProjects_SelectedIndexChanged(System.Object,System.EventArgs)">
	<summary>
 Enable or disable the delete button depending on whether or not there is a valid selection
 </summary>
</member><member name="M:VideoMiner.frmProjectNames.txtProject_TextChanged(System.Object,System.EventArgs)">
	<summary>
 Enable or disable the delete button depending on whether or not there is a valid selection
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.GPS_TIMEOUT">
	<summary>
 Default timeout value used in form load event
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.TIMEOUT_DEFAULT">
	<summary>
 Value of default connection and read timeout in seconds
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_intSearchingCounter">
	<summary>
 Counter to keep track of timer ticks during connection attempt. Connection timeout counter.
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_lngConnectedCounter">
	<summary>
 Counter to keep track of timer ticks for data received, used to make sure the data keep coming in once a connectioin is established
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_tsLastTimeDataReceived">
	<summary>
 The date and time of the last data received. Used with m_lngConnectedCounter to figure out if the connection has been terminated.
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_spSerialPort">
	<summary>
 The serial port object, withevents so we can handle the DataReceived event
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_strComPort">
	<summary>
 Name of the COM port, eg. "COM1"
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_strNMEAStringType">
	<summary>
 The NMEA string to use for data filtering, eg. "GPGGA"
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_strParity">
	<summary>
 Parity value for the serial port connection, eg. "NONE"
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_intBaudRate">
	<summary>
 Baud rate for the serial port connection, eg. 4800
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_dblStopBits">
	<summary>
 Stop bits for the serial port connection, eg. 1.5
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_intDataBits">
	<summary>
 Data bits for the serial port connection, eg. 8
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_intTimeout">
	<summary>
 Timeout in seconds for the serial port connection
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_blSendChosenStringsOnly">
	<summary>
 If true, only the chosen NMEA strings will be sent to the data viewer form. If false, all incoming NMEA strings will be sent.
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_blFirstTimeConnected">
	<summary>
 Because the connected variable is set everytime good data are received, this is required to keep track of the
 first time it is connected. This allows the form to raise a GPSConnected event one time only,
 upon connection.
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.frmGpsSettings.m_blConnected">
	<summary>
 True if the GPS data of the given NMEA string are being received, false otherwise
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_dblGPSX">
	<summary>
 GPS X value (latitude) in the format DDMM.MMMM
 </summary>
	<remarks>D=Degrees, M=Minutes</remarks>
</member><member name="F:VideoMiner.frmGpsSettings.m_dblGPSY">
	<summary>
 GPS Y value (longitude) in the format DDMM.MMMM
 </summary>
	<remarks>D=Degrees, M=Minutes</remarks>
</member><member name="F:VideoMiner.frmGpsSettings.m_dblGPSZ">
	<summary>
 GPS Z value (elevation) in meters
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_dblGPSTime">
	<summary>
 GPS time value in the format HHMMSS
 </summary>
	<remarks>H=Hour, M=Minute, S=Second</remarks>
</member><member name="F:VideoMiner.frmGpsSettings.m_tsGPSTime">
	<summary>
 GPS time value as a TimeSpan object
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_strCurrData">
	<summary>
 A string which holds the most recent good data, which means data that matched the NMEA string requested
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_blDataGood">
	<summary>
 True if m_strCurrData is good, that is if it is good and the connection is still good.
 If the connection was lost for the 'timeout' period then this will be set to False
 even if m_strCurrData appears good.
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_frmStringDataViewer">
	<summary>
 A form which shows the authenticated data strings in a textbox in real time
 </summary>
</member><member name="F:VideoMiner.frmGpsSettings.m_tmrTimerItem">
	<summary>
 Timer for the check to make sure connectivity is maintained.
 </summary>
	<remarks>Had to be a system threading timer due to SerialPort.DataReceived being in another thread</remarks>
</member><member name="F:VideoMiner.frmGpsSettings.m_tmrcbTimerDelegate">
	<summary>
 Callback delegate for m_tmrTimerItem
 </summary>
</member><member name="P:VideoMiner.frmGpsSettings.SerialPort">
	<summary>
 Exposes the SerialPort Object
 </summary>
	<returns>SerialPort</returns>
</member><member name="P:VideoMiner.frmGpsSettings.ComPort">
	<summary>
 The name of the ComPort, eg "COM1", "COM2", ...
 </summary>
	<value>String</value>
	<returns>String</returns>
</member><member name="P:VideoMiner.frmGpsSettings.NMEAStringType">
	<summary>
 NMEA (National Marine Electronics Association) String type
 </summary>
	<value>String</value>
	<returns>String</returns>
	<remarks>This String will be like "GPGGA", "GPRMC", ...</remarks>
</member><member name="P:VideoMiner.frmGpsSettings.BaudRate">
	<summary>
 Baud rate for the serial port connection
 </summary>
	<value>Integer</value>
	<returns>Integer</returns>
</member><member name="P:VideoMiner.frmGpsSettings.Parity">
	<summary>
 Parity value for the serial port connection
 </summary>
	<value>Integer</value>
	<returns>Integer</returns>
</member><member name="P:VideoMiner.frmGpsSettings.ParityEnumVal">
	<summary>
 Parity enumeration value for the serial port connection
 </summary>
	<value>Parity</value>
	<returns>Parity</returns>
</member><member name="P:VideoMiner.frmGpsSettings.StopBits">
	<summary>
 Stop bits value for the serial port connection
 </summary>
	<value>Integer</value>
	<returns>Integer</returns>
</member><member name="P:VideoMiner.frmGpsSettings.StopBitsEnumVal">
	<summary>
 Stop bits enumeration for the serial port connection
 </summary>
</member><member name="P:VideoMiner.frmGpsSettings.DataBits">
	<summary>
 Data bits value for the serial port connection
 </summary>
	<value>Integer</value>
	<returns>Integer</returns>
</member><member name="P:VideoMiner.frmGpsSettings.Timeout">
	<summary>
 Length of time in seconds to timeout the connection operation
 </summary>
</member><member name="P:VideoMiner.frmGpsSettings.IsConnected">
	<summary>
 True if the serial port is connected, false otherwise
 </summary>
</member><member name="P:VideoMiner.frmGpsSettings.IsOpen">
	<summary>
 True if the Serial port is open
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="E:VideoMiner.frmGpsSettings.GPSVariablesChangedEvent">
	<summary>
 Signals that the GPS variables in the form have been changed and the caller should update their data to reflect the changes
 </summary>
	<remarks></remarks>
</member><member name="E:VideoMiner.frmGpsSettings.GPSConnectedEvent">
	<summary>
 Used to signal that the serial port is connected and receiveing data for the MNEA string selected
 </summary>
</member><member name="M:VideoMiner.frmGpsSettings.GPSConnected">
	<summary>
 Required for InvokeAction calls
 </summary>
</member><member name="E:VideoMiner.frmGpsSettings.GPSDisconnectedEvent">
	<summary>
 Used to signal that the serial port is not connected, so the data are not available
 </summary>
</member><member name="M:VideoMiner.frmGpsSettings.GPSDisconnected">
	<summary>
 Required for InvokeAction calls
 </summary>
</member><member name="E:VideoMiner.frmGpsSettings.ConnectingSerialPortEvent">
	<summary>
 Signal that the form is currently trying to connect to the serial port
 </summary>
</member><member name="E:VideoMiner.frmGpsSettings.DataChangedEvent">
	<summary>
 Signals that there are new good data ready to be retrieved
 </summary>
</member><member name="M:VideoMiner.frmGpsSettings.DataChanged">
	<summary>
 Required for InvokeAction calls
 </summary>
</member><member name="E:VideoMiner.frmGpsSettings.NoCOMPortsEvent">
	<summary>
 Signals that there are no COM ports available on this machine
 </summary>
	<remarks></remarks>
</member><member name="M:VideoMiner.frmGpsSettings.#ctor(System.String,System.String,System.Int32,System.String,System.Double,System.Int32,System.Int32)">
	<summary>
 Creates a new instance of the GPS settings form.
 Adds ComboBox choices for COM Port, Baud rate, Parity, Stop bits, and Data bits
 </summary>
</member><member name="M:VideoMiner.frmGpsSettings.SetSerialPortVariables">
	<summary>
 Set the member variables to be what they currently are in the form selections controls.
 </summary>
</member><member name="M:VideoMiner.frmGpsSettings.ConnectSerialPort">
	<summary>
 Try to connect the serial port with the currently selected values on the textbox
 </summary>
	<remarks></remarks>
</member><member name="M:VideoMiner.frmGpsSettings.RefreshStatus">
	<summary>
 Refresh all window controls based on connectivity of the serial port object.
 Raises the connected event. Also append the newest good data line to the
 port data viewer form.
 </summary>
	<remarks>This subroutine is thread safe. Raises the GPSConnected or GPSDisconnected events via a delegate</remarks>
</member><member name="M:VideoMiner.frmGpsSettings.cmdOK_Click(System.Object,System.EventArgs)">
	<summary>
 Clicking the OK button just hides the form so the connection, if working, will remain for the caller to access
 </summary>
</member><member name="M:VideoMiner.frmGpsSettings.cmdConnection_Click(System.Object,System.EventArgs)">
	<summary>
 Toggle to connect or disconnect the serial port
 </summary>
</member><member name="M:VideoMiner.frmGpsSettings.ClosePortThread">
	<summary>
 Creates a new thread to close the port because of an issue with the method
 </summary>
</member><member name="M:VideoMiner.frmGpsSettings.CloseSerialPort">
	<summary>
 Close the serial port and reset form member variables to reflect change
 </summary>
</member><member name="M:VideoMiner.frmGpsSettings.tmrGPSTimeout_Tick(System.Object,System.EventArgs)">
	<summary>
 Handles the connection timeout timer. If timeout period has expired, a ReadLine is done on the stream and
 if it is unsuccessful the port will be closed and a message issued. If it succeeds then the connection is
 assumed good.
 </summary>
</member><member name="M:VideoMiner.frmGpsSettings.GetData(System.String)">
	<summary>
 Checks the current data string for compliance with the chosen NMEA string
 If it is correct, the connected property will be set to true, 
 the connection timeout timer will be stopped and the data will be extracted.
 If any of the key fields (time, lat, long, elevation) are empty strings then
 set the data as bad and exit.
 </summary>
</member><member name="T:VideoMiner.frmGpsSettings.StateObjClass">
	<summary>
 Used to hold parameters for calls to TimerTask. 
 </summary>
</member><member name="M:VideoMiner.frmGpsSettings.TimerTask(System.Object)">
	<summary>
 Task to run when the threaded timer is started. The timer checks to make sure less than 'timeout' seconds has
 occurred since the last successful data grab.
 </summary>
	<param name="StateObj">The thread state class (StateObjClass)</param>
</member><member name="M:VideoMiner.frmGpsSettings.SerialPort_DataReceived(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
	<summary>
 Handles data coming in on the serial port. The first time this happens, the port
 will be officially "connected".
 </summary>
	<remarks>The serial port launches this event on another thread, which is why there are all the marshalled BeginInvokes in this function,
 all UI updating must be marshalled in this way or there will be unspecified behaviour (freezing/deadlocks)</remarks>
</member><member name="M:VideoMiner.frmGpsSettings.cmdViewPortData_Click(System.Object,System.EventArgs)">
	<summary>
 Opens a port data viewing form (frmStringDataViewer)
 </summary>
</member><member name="M:VideoMiner.frmGpsSettings.txtDataBits_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
	<summary>
 Prevent non-digits from being entered in DataBits textbox
 </summary>
</member><member name="M:VideoMiner.frmGpsSettings.txtTimeout_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
	<summary>
  Prevent non-digits from being entered in Timeout textbox
 </summary>
</member><member name="M:VideoMiner.frmGpsSettings.DisableAll">
	<summary>
 Disables all controls on the form except the Cancel button.
 Useful when there are no com ports available
 </summary>
</member><member name="T:VideoMiner.frmGpsSettings">
	<summary>
 Form for connecting a GPS device to a serial port.
 </summary>
	<remarks>Many things can happen with serial ports, the user can unplug their device suddenly, turn the data-sending off, change some setting
 on the device itself, turn off the device. This class attempts to account for all of these situations by constantly checking data
 values and refreshing the status. The RefreshStatus function refreshes all controls to match what the serial port is doing and
 also raises the events 'GPSConnectedEvent' and 'GPSDisconnectedEvent'.</remarks>
</member><member name="M:VideoMiner.modGlobals.SingleQuote(System.String)">
	<summary>
 Place single quotes (') around a String
 </summary>
	<param name="strValue">The string to place single quotes around</param>
	<returns>A single quoted String</returns>
	<remarks>Used for database query string building in VideoMiner</remarks>
</member><member name="M:VideoMiner.modGlobals.DoubleQuote(System.String)">
	<summary>
 Place double quotes (") around a String
 </summary>
	<param name="strValue">The string to place double quotes around</param>
	<returns>A double quoted String</returns>
	<remarks>Used for database query string building in VideoMiner</remarks>
</member><member name="M:VideoMiner.modGlobals.numericTextboxValidation(System.Windows.Forms.KeyPressEventArgs@)">
	<summary>
 Validates text entered into TextBoxes in the project
 </summary>
	<param name="e">System.Windows.Forms.KeyPressEventArgs</param>
	<remarks>Allows only digits, period, and backspace to be used in a TextBox</remarks>
</member><member name="M:VideoMiner.modGlobals.ToMilitaryTime(System.DateTime)">
	<summary>
 Change a given time into military (24 hour) time
 </summary>
	<param name="dtRealTime">DateTime</param>
	<returns>String representing the time in 24-hour format</returns>
	<remarks>If the number of milliseconds in the time is greater than 500, the seconds will be rounded up by one</remarks>
</member><member name="M:VideoMiner.modGlobals.pad0(System.Int32)">
	<summary>
 Pad a string of length 1 with a zero. Used to make things like hours=0 into hours="00"
 </summary>
</member><member name="M:VideoMiner.modGlobals.InvokeAction``1(System.Action{``0},``0,System.Boolean)">
	<summary>
 Will raise an event across threads
 </summary>
	<typeparam name="T"></typeparam>
	<param name="anAction"></param>
	<param name="Arg"></param>
	<param name="ThrowMainFormMissingError"></param>
	<remarks>Used to raise events from a side-thread to the UI thread by marshaling the call
 Example:
 Write a subroutine to raise the event
 Protected Overridable Sub GPSConnected()
    RaiseEvent GPSConnectedEvent()
 End Sub
 Then invoke it like this:
   InvokeAction(AddressOf GPSConnected, New EventArgs())
 Code from:
 http://www.codeproject.com/Articles/21168/Raising-Events-from-Other-Threads
 </remarks>
</member><member name="T:VideoMiner.modGlobals">
	<summary>
 This module defines 'Global' variables and functions.
 </summary>
	<remarks>Think hard before adding something here, especially new classes. The program should
 remain object-oriented as much as possible and adding things here will likely break that</remarks>
</member><member name="F:VideoMiner.Database.DB_CONN_STRING">
	<summary>
 Connection string header fragment. The full path of the MS Access database will be appended
 to this string to get the full connection string.
 </summary>
</member><member name="F:VideoMiner.Database.m_strDatabaseFilePath">
	<summary>
 The full-path name of the MS Access database file (mdb file).
 </summary>
</member><member name="F:VideoMiner.Database.m_data_adapter_data">
	<summary>
 The data adapter for the 'data' table in the database
 </summary>
	<remarks>A seperate data adapter is needed for each table which may be modified by the Update function</remarks>
</member><member name="F:VideoMiner.Database.m_data_adapter_species_buttons">
	<summary>
 The data adapter for the 'species_buttons' table in the database
 </summary>
	<remarks>A seperate data adapter is needed for each table which may be modified by the Update function</remarks>
</member><member name="P:VideoMiner.Database.Name">
	<summary>
 The full path name of the MS Access database file (.mdb file)
 </summary>
</member><member name="P:VideoMiner.Database.ConnectionString">
	<summary>
 The full connection string for the data source.
 </summary>
</member><member name="P:VideoMiner.Database.IsOpen">
	<summary>
 Whether or not the database has been opened using the Open() function
 </summary>
</member><member name="M:VideoMiner.Database.Open">
	<summary>
 Opens the database. Returns True if successful, false otherwise.
 </summary>
	<returns>Boolean</returns>
	<remarks>If an exception is thrown, a messagebox will appear and False will be returned</remarks>
</member><member name="M:VideoMiner.Database.Close">
	<summary>
 Closes the database. Returns True if successful, false otherwise.
 </summary>
	<returns>Boolean</returns>
	<remarks>If an exception is thrown, a messagebox will appear and False will be returned</remarks>
</member><member name="M:VideoMiner.Database.GetDataTableSchema">
	<summary>
 Runs a schema table for the MS Access database
 </summary>
	<returns>A DataTable which holds the database schema or Nothing</returns>
	<remarks>If an exception is thrown or the database connection is not open, a messagebox will appear and Nothing will be returned.</remarks>
</member><member name="M:VideoMiner.Database.GetDataTable(System.String,System.String)">
	<summary>
 Runs a query on a given table and returns the resulting data.
 </summary>
	<param name="query">A legal SQL query for an MS Access database</param>
	<param name="tableName">The name of the table used in the query</param>
	<returns>A DataTable which holds the data queried for or Nothing</returns>
	<remarks>If an exception is thrown or the database connection is not open, a messagebox will appear and Nothing will be returned.</remarks>
</member><member name="M:VideoMiner.Database.ExecuteNonQuery(System.String)">
	<summary>
 Executes a query on the database which does not return data. Examples are UPDATE, DELETE, or INSERT queries.
 Also create table queries are allowed.
 </summary>
	<param name="query">The query to execute on the MS Access database</param>
	<returns>True if the query was successful, false otherwise and false if an exception was thrown</returns>
	<remarks>If an exception is thrown or the database connection is not open, a messagebox will appear and False will be returned.</remarks>
</member><member name="M:VideoMiner.Database.Update(System.Data.DataTable,System.String)">
	<summary>
 Runs an update query on the data adapter with the given data_table. Used to save changes to the database table from outside.
 </summary>
	<returns>True if successful, false otherwise</returns>
	<remarks>If an exception is thrown or the database connection is not open, a messagebox will appear and False will be returned.</remarks>
</member><member name="T:VideoMiner.Database">
	<summary>
 This module encapsulates the reading and writing to an MS Access database using the OLEDB interface
 </summary>
	<remarks></remarks>
</member><member name="P:VideoMiner.frmAbundanceTableView.SelectedCodeName">
	<summary>
 If a row is selected, return the second cell's value from that row
 If no row is selected, return the empty string.
 </summary>
</member><member name="E:VideoMiner.frmAbundanceTableView.DataChanged">
	<summary>
 Tell the parent that the data have changed
 </summary>
</member><member name="P:VideoMiner.frmTableView.SelectedCode">
	<summary>
 If a row is selected, return the first cell's value from that row.
 If no row is selected, return the empty string.
 </summary>
</member><member name="P:VideoMiner.frmTableView.SelectedCodeName">
	<summary>
 If a row is selected, return the second cell's value from that row
 If no row is selected, return the empty string.
 </summary>
</member><member name="P:VideoMiner.frmTableView.Comment">
	<summary>
 Return the contents of the comment box, which may be an empty string.
 </summary>
</member><member name="E:VideoMiner.frmTableView.ClearEvent">
	<summary>
 If user presses Clear button, this will fire so that the main form can update its dynamic buttons and textboxes
 </summary>
	<remarks></remarks>
</member><member name="E:VideoMiner.frmTableView.DataChanged">
	<summary>
 If user edits the comment box, this event will be raised so that the main form can write a record to the database
 </summary>
	<param name="comment">A comment as input by user into the comment box, or the empty string if there is no comment.</param>
	<remarks></remarks>
</member><member name="M:VideoMiner.frmTableView.frmTableView_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
 Capture the press of the 'X' button and hide instead of closing to avoid an exception on re-opening
 </summary>
</member><member name="M:VideoMiner.frmTableView.DataGridView1_SelectionChanged(System.Object,System.EventArgs)">
	<summary>
 Handles the event when the user selects a row of the table. If the comment box is not empty, it will raise an event so that the main form can
 insert a new record in the database to capture the comment.
 </summary>
</member><member name="M:VideoMiner.frmTableView.btnClear_Click(System.Object,System.EventArgs)">
	<summary>
 If the clear button is pressed, clear the selected row so that there is no selection, and raise an event to the parent.
 </summary>
</member><member name="M:VideoMiner.frmTableView.clearSelection">
	<summary>
 Clear the datagrid selection and empty the comment box
 </summary>
</member><member name="T:VideoMiner.frmTableView">
	<summary>
 This form will show a table which is supplied in the constructor as a DataTable.
 It will allow the user to select a row, which will cause a query to insert the data
 in the database
 </summary>
</member><member name="F:VideoMiner.VideoMiner.m_strWorkingPath">
	<summary>
 The working directory of the software
 </summary>
</member><member name="F:VideoMiner.VideoMiner.m_strConfigFilePath">
	<summary>
 The configuration directory for the software
 </summary>
	<remarks>This will be the directory given by (m_strWorkingPath)\Config</remarks>
</member><member name="F:VideoMiner.VideoMiner.m_strConfigFile">
	<summary>
 The full path for the configuration file
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.VideoMiner.m_strDatabasePath">
	<summary>
 Holds the last known database path as entered by the user in the OpenFileDialog
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.VideoMiner.m_strDatabaseFilePath">
	<summary>
 Holds the full path filename as entered by the user in the OpenFileDialog
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.VideoMiner.m_strVideoPath">
	<summary>
 Holds the last known video file path as entered by the user in the OpenFileDialog
 Does not hold the filename itself
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.VideoMiner.m_strVideoFile">
	<summary>
 Hold the currently loaded video's filename without path information
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.VideoMiner.m_strSessionPath">
	<summary>
 Holds the path of the last known session's path as entered by the user in the OpenFileDialog
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.VideoMiner.m_tsUserTime">
	<summary>
 Holds the user time as set by the frmSetTime form.
 This is the master time object to be used by all functions when data are recorded.
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.VideoMiner.m_GPS_X">
	<summary>
 Holds the GPS X value (latitude). If a GPS device is not connected, this will be a default
 value as set in the load function for this form.
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.VideoMiner.m_GPS_Y">
	<summary>
 Holds the GPS Y value (longitude). If a GPS device is not connected, this will be a default
 value as set in the load function for this form.
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.VideoMiner.m_GPS_Z">
	<summary>
 Holds the GPS Z value (elevation). If a GPS device is not connected, or the NMEA sting
 does not support elevation, this will be a default value as set in the load function for this form.
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.VideoMiner.m_project_name">
	<summary>
 Name of the current project
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.VideoMiner.m_transect_name">
	<summary>
 Name of the current transect
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.VideoMiner.m_transect_date">
	<summary>
 Date for the current transect
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.VideoMiner.m_video_file_open">
	<summary>
 Is there a video file currently open or not.
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.VideoMiner.m_dblVideoRate">
	<summary>
 Relative rate at which to play the video. 1=regular speed.
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.VideoMiner.m_blInTransect">
	<summary>
 Are we in a transect currently or not?
 </summary>
	<remarks></remarks>
</member><member name="F:VideoMiner.VideoMiner.m_data_table">
	<summary>
 Holds the data table for the actual project data being recorded
 </summary>
</member><member name="F:VideoMiner.VideoMiner.m_data_codes_table">
	<summary>
 Holds the data code table for the project. This will be passed to the various DynamicPanels
 so that they can link their data to the proper data code
 </summary>
</member><member name="T:VideoMiner.VideoMiner.stcRowColoring">
	<summary>
 Coloring of a row in the data grid. When a field is sorted by clicking the column header, the coloring is recorded, then the grid is sorted,
 then the coloring is re-applied by using the key field 'ID'. This structure represents a single row in the grid. The two cell arrays hold the
 background and foreground colors for the cells in the row.
 </summary>
</member><member name="F:VideoMiner.VideoMiner.arrColoring">
	<summary>
 An array of row colorings to keep track of dirty cells when the columns are sorted.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.frmVideoMiner_Load(System.Object,System.EventArgs)">
	<summary>
 Get version name from assembly, read and process the Config file, and setup the form controls for an unloaded state.
 </summary>
	<param name="sender">System.Object</param>
	<param name="e">System.EventArgs</param>
	<remarks> From MSDN for Windows.Forms.Control.CheckForIllegalCrossThreadCalls:
 When a thread other than the creating thread of a control tries to access one of that control's methods or properties,
 it often leads to unpredictable results. A common invalid thread activity is a call on the wrong thread that accesses
 the Control 's Handle property. Set CheckForIllegalCrossThreadCalls to true to find and diagnose this thread activity
 more easily while debugging. </remarks>
</member><member name="M:VideoMiner.VideoMiner.new_species_entry_handler(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Handles the event request to insert a new entry into the database.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.loadConfigurationFile">
	<summary>
 Load the metadata found in the VideoMiner configuration file into member variables.
 If the configuration file is not found, defaults will be assigned for GPS settings and the path variables
 </summary>
	<returns>True if all member variables were populated. False if an exceptioon was thrown or the file does not exist</returns>
</member><member name="M:VideoMiner.VideoMiner.SaveConfiguration(System.String,System.String,System.Boolean)">
	<summary>
 Save a single variable's value to the XML configuration file. If the variable does not exist,
 a new node, and any parent nodes which are required will be added to the XML document.
 If forceCreate is true, the node will be created even if one with the same name already exists.
 This makes dynamic lists possible.
 </summary>
	<param name="xPath">An XPath String representing the XML node name</param>
	<param name="strValue">The value to save in the node represented by xPath</param>
	<returns>A Boolean representing success or failure</returns>
</member><member name="M:VideoMiner.VideoMiner.testSaveConfiguration">
	<summary>
 Test for SaveConfiguration function. Can be deleted once project complete.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.DeleteXMLNode(System.String,System.String)">
	<summary>
 Delete a node represented by the string 'xPath'
 eg. if xPath = "X/Y/Z", the function will delete the node Z.
 </summary>
	<param name="xPath">An XPath String representing the node tag you wish to delete</param>
	<param name="strValue">The value to delete. There can be more than one node with the same tag, so this is required to diferrentiate.</param>
	<remarks>xPath is a "/" seperated string where "/" represents node breaks.
 i.e. "X/Y/Z" represents X is parent of Y, Y is parent of Z and Z is the node to delete, as long as it has
 value equal to strValue</remarks>
</member><member name="M:VideoMiner.VideoMiner.CreateXMLNode(System.Xml.XmlDocument@,System.Xml.XmlElement@,System.String,System.String,System.String)">
	<summary>
 Recursively create a node and any required parent nodes represented by the string 'xPath'
 eg. if xPath = "X/Y/Z", the function will insert a node with parents if necessary X-&gt;Y-&gt;Z
 where "Z" is the base case and assumed to be the innerText of the child node.
 </summary>
	<param name="docNode">A reference to an XmlDocument root node</param>
	<param name="node">A reference to a parent to add a new node to. If Nothing, assume docNode is the parent</param>
	<param name="xPath">An XPath String representing the node you wish to add</param>
	<param name="strValue">String representing the value to set the variable to</param>
	<param name="leftPath">String representing the xPath to the left of the current node</param>
	<remarks>xPath is a "/" seperated string where "/" represents node breaks.
 i.e. "X/Y/Z" represents X is parent of Y, Y is parent of Z and Z is the variable with a value to set</remarks>
</member><member name="M:VideoMiner.VideoMiner.GetConfiguration(System.String)">
	<summary>
 Get a single variable's value for a given node from the XML configuration file.
 </summary>
	<param name="xPath">An XPath String representing the XML node name, with children seperated by "/"</param>
	<returns>A String, the value of the requested XML node</returns>
</member><member name="M:VideoMiner.VideoMiner.GetConfigurationCollection(System.String)">
	<summary>
 Get a collection of variables values for a given node from the XML configuration file.
 </summary>
	<param name="xPath">An XPath String representing the XML node name, with children seperated by "/"</param>
	<returns>A Collection containing the children's values for the requested XML node</returns>
</member><member name="M:VideoMiner.VideoMiner.mnuOpenSession_Click(System.Object,System.EventArgs)">
	<summary>
 When user selects "Open Session" from the file menu, sub openSession() and open a dialogue
 where the user can restore a previous session that was being run in the program via a VideoMiner Session file.
 This restores the last video that was being played.
 </summary>
	<param name="sender">System.Object</param>
	<param name="e">System.EventArgs</param>
</member><member name="M:VideoMiner.VideoMiner.mnuSaveSession_Click(System.Object,System.EventArgs)">
	<summary>
 sub saveSession() when the user selects Save Session from the file menu, and open a dialogue
 where the user can save the current VideoMiner Session file. This saves which video is currently being played.
 </summary>
	<param name="sender">System.Object</param>
	<param name="e">System.EventArgs</param>
	<remarks></remarks>
</member><member name="M:VideoMiner.VideoMiner.mnuSaveSessionAs_Click(System.Object,System.EventArgs)">
	<summary>
 sub saveSessionAs() and open a dialogue where the user can save the current state
 that is being run in the program as a new VideoMiner Session file.
 This saves which video is currently being played.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="M:VideoMiner.VideoMiner.mnuAbout_Click(System.Object,System.EventArgs)">
	<summary>
 When a user selects about from the menu bar, display the ABOUT message by opening the AboutBox1 form
 </summary>
	<param name="sender">System.Object</param>
	<param name="e">System.EventArgs</param>
</member><member name="M:VideoMiner.VideoMiner.mnuOpenDatabase_Click(System.Object,System.EventArgs)">
	<summary>
 When the user clicks "Open Database" in the file menu, open a dialog box where a database can be selected
 and opened for use in the program.
 Load OpenFileDialog object to prompt user to select a database to open.
 When the user clicks OK, sub openDatabase and send it the path of the database to open.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.CloseDatabase_Click(System.Object,System.EventArgs)">
	<summary>
 When the user clicks "Close Database" in the file menu, close the currently open database.
 </summary>
	<remarks></remarks>
</member><member name="M:VideoMiner.VideoMiner.mnuRefreshForm_Click(System.Object,System.EventArgs)">
	<summary>
 When the user clicks "Refresh database", it will reload the database into the form.
 </summary>
	<remarks></remarks>
</member><member name="M:VideoMiner.VideoMiner.cmdShowSetTimecode_Click(System.Object,System.EventArgs)">
	<summary>
 Ask user to input time that is shown on the video. This synchronizes the program with the video, and sets the label to the correct time.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:VideoMiner.VideoMiner.TransectStart_Click(System.Object,System.EventArgs)">
	<summary>
 This handler is called when the user clicks on the "Transect Start" button.
 Pauses video, prompts user for a transect name, inserts new record in the DataGridView1
 database table, and plays the video again.
 </summary>
	<remarks></remarks>
</member><member name="M:VideoMiner.VideoMiner.button_CheckForDirtyDataEvent(System.Object,System.EventArgs)">
	<summary>
 Handler to check to make sure that the Data grid is not dirty. If it isn't, or the user says to disregard changes and save the record anyway,
 the appropriate thing will happen for data recording (species event form will be shown or data table form sill be shown, or quick entry will happen).
 </summary>
</member><member name="M:VideoMiner.VideoMiner.buttonDataChanged(System.Object,System.EventArgs)">
	<summary>
 Handle the changing of button data by creating an insert query and saving to the database
 </summary>
</member><member name="M:VideoMiner.VideoMiner.rareSpeciesDataChanged(System.Object,System.EventArgs)">
	<summary>
 Handles the storage of a record from when the user chooses a species from the Rare species form.
 </summary>
	<param name="sender">Instance of the frmRareSpeciesForm</param>
</member><member name="M:VideoMiner.VideoMiner.cmdEdit_Click(System.Object,System.EventArgs)">
	<summary>
 Brings up the edit species dialog (frmSpeciesList) which allows the user to change the order of the species buttons
 and to delete them, edit them, or add new ones.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.speciesButtonsChanged">
	<summary>
 When the user has changed the species buttons from the frmSpeciesEvent form, this function will remove and re-add the DynamicPanel
 which contains the species buttons.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.newProjectName">
	<summary>
 Add a new project name to the XML file when the user changes it inside frmProjectNames
 </summary>
</member><member name="M:VideoMiner.VideoMiner.project_name_changed">
	<summary>
 Change the project name to what was chosen in the frmProjectName form.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.project_name_delete">
	<summary>
 Delete the project name currently selected in the frmProjectName form.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.openSession">
	<summary>
 Open a session which has saved the previous state of the program in VideoMiner Session file (*.xml)
 This will open the video that was being played when the session was saved.
 </summary>
	<remarks></remarks>
</member><member name="M:VideoMiner.VideoMiner.saveSession">
	<summary>
 Save the session, i.e. which database and which video and the video's position
 </summary>
</member><member name="M:VideoMiner.VideoMiner.Save_XmlSettings(System.String,System.String)">
	<summary>
 Function to save the XML settings to a file
 </summary>
	<param name="strPath"></param>
	<param name="strValue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:VideoMiner.VideoMiner.getTimeCode">
	<summary>
 Return the current timecode.
 </summary>
	<remarks></remarks>
</member><member name="M:VideoMiner.VideoMiner.toggleVideoMenu(System.Boolean)">
	<summary>
 Enable or disable the video menu items
 </summary>
	<remarks></remarks>
</member><member name="M:VideoMiner.VideoMiner.get_rel_filename(System.String)">
	<summary>
 Returns the filename without its path
 </summary>
	<remarks></remarks>
</member><member name="M:VideoMiner.VideoMiner.files_loaded">
	<summary>
 Toggle enabled/disabled for: Set Time Code Button, Transect Start Button, On/Off Bottom Button, Resume Video Button
 </summary>
</member><member name="M:VideoMiner.VideoMiner.toggle_bottom">
	<summary>
 Change text in OnOffBottomTextbox and on OffBottom button between "Off Bottom" and "On Bottom", and insert a record in the database to reflect this change
 </summary>
</member><member name="M:VideoMiner.VideoMiner.mnuOpenFile_Click(System.Object,System.EventArgs)">
	<summary>
 Handles the menu click event for the opening of a video file
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="M:VideoMiner.VideoMiner.openVideo">
	<summary>
 Open a video file. Creates a new instance of frmVideoPlayer
 </summary>
	<returns>Boolean representing success</returns>
	<remarks>Returns True if the user chose an existing file to play, False is they pressed cancel or clicked the 'X'</remarks>
</member><member name="M:VideoMiner.VideoMiner.timerTick">
	<summary>
 Updates the time text on the form everytime the timer tick event is issued by the frmVideoPlayer form
 </summary>
</member><member name="M:VideoMiner.VideoMiner.closeDatabase">
	<summary>
 Closes the MS Access database, and resets all controls to the unloaded state.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.openDatabase">
	<summary>
 Opens the MS Access database and fills the DynamicPanels with buttons. Set up visibility on other VideoMiner buttons
 </summary>
</member><member name="M:VideoMiner.VideoMiner.fetch_data">
	<summary>
 Fetch the data table from the MS Access database into the DataGridView and sets the next unique ID that the database can recieve.
 </summary>
	<remarks>Order of the rows will be by decending primary key ('ID' field)</remarks>
</member><member name="M:VideoMiner.VideoMiner.runInsertQuery(System.Collections.Generic.Dictionary{System.String,System.Tuple{System.String,System.String,System.Boolean}})">
	<summary>
 Creates and runs an 'INSERT INTO' query on the database for all of the given items in the dictionary. Each item will be incorporated into a single query for insertion.
 </summary>
	<param name="dictTransect">A Dictionary object of Key/Value pairs where the keys are field names as found in the main 'data' table in the database, and the values are a pair
 of codes, the first one being the data code for the field being recorded to in the 'data' table and the second being the data code itself as chosen by the user.</param>
</member><member name="M:VideoMiner.VideoMiner.cmdRareSpeciesLookup_Click(System.Object,System.EventArgs)">
	<summary>
 For looking up and saving to the database a rare species (one not on the species buttons).
 </summary>
</member><member name="F:VideoMiner.VideoMiner.rowWasGood">
	<summary>
 Whether or not the row is synced properly with the database. Used when the user edits a cell value. The cell's row
 will immediately be colored since the data are now 'dirty' but if the value is of the wrong type (not validated)
 then this is required to put the row back into the condition it was in before the current edit attempt.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.grdVideoMinerDatabase_Sorted(System.Object,System.Windows.Forms.DataGridViewBindingCompleteEventArgs)">
	<summary>
 Apply coloring to the data grid after it has been sorted
 </summary>
</member><member name="M:VideoMiner.VideoMiner.grdVideoMinerDatabase_CurrentCellDirtyStateChanged(System.Object,System.EventArgs)">
	<summary>
 Triggered when any cell value is changed in the grid. Will update a label telling the user that the data is no longer synced with the database,
 and color the row of cells salmon.
 If the user just types the same value that was in the cell to begin with, the row will be unchanged.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.grdVideoMinerDatabase_DataError(System.Object,System.Windows.Forms.DataGridViewDataErrorEventArgs)">
	<summary>
 Give column and row-specific error message to user. Avoids errors/exceptions during the update to the database.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.grdVideoMinerDatabase_KeyDown(System.Windows.Forms.DataGridView,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Key events for the data grid. The arrow keys will move to adjacent cells, the Enter key will submit the edit (if applicable)
 and move to the next cell down or, if it is currently the last row, the next cell on the right, or if neither of those,
 the top left-most cell. Pressing the 'delete' key will delete rows from the grid view and the database.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.grdVideoMinerDatabase_EditingControlShowing(System.Windows.Forms.DataGridView,System.Windows.Forms.DataGridViewEditingControlShowingEventArgs)">
	<summary>
 Allow keys to be captured while the editor is focussed on an individual cell
 </summary>
</member><member name="M:VideoMiner.VideoMiner.TextBox_PreviewKeyDown(System.Object,System.Windows.Forms.PreviewKeyDownEventArgs)">
	<summary>
 Sets up the Enter or Return key to be captured by the TextBox, which is a cell in the DataGridView.
 This is the only way that the Enter key can be used to submit a value when editing a cell.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.deleteSelectedRows(System.Object,System.EventArgs)">
	<summary>
 Deletes selected rows from the MS access database as well as in the grid view. A confirmation box will verify this.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.updateDatabaseWithGridValues">
	<summary>
 Update the MS Access database table 'data' with values from the DataGridView object.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.grdVideoMinerDatabase_RightClick(System.Windows.Forms.DataGridView,System.Windows.Forms.MouseEventArgs)">
	<summary>
 Captures right click in the DataGridView. This will delete rows from the grid view and the database.
 </summary>
	<remarks>If no rows are selected, a message will tell you to select rows and then press delete</remarks>
</member><member name="M:VideoMiner.VideoMiner.grdVideoMinerDatabase_CellValidating(System.Object,System.Windows.Forms.DataGridViewCellValidatingEventArgs)">
	<summary>
 Validate the cell values if user makes them NULL. Avoids errors/exceptions during the update to the database.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.cmdRevertDatabase_Click(System.Object,System.EventArgs)">
	<summary>
 Reload the grid from the access database. A confirmation box will be displayed and if the user aggrees then any changes in the grid will
 be discarded and the database will be reloaded from scratch
 </summary>
</member><member name="M:VideoMiner.VideoMiner.setTimes">
	<summary>
 Set the User time (txtTime) textbox and source time (txtTimeSource) to show
 </summary>
</member><member name="M:VideoMiner.VideoMiner.unsetTimes">
	<summary>
 Set the user time (txtTime) textbox and source time textbox (txtTimeSource) to dissappear
 </summary>
</member><member name="M:VideoMiner.VideoMiner.time_changed">
	<summary>
 Gets the new user defined time from the set time form and call setUserTime to apply
 </summary>
</member><member name="M:VideoMiner.VideoMiner.gps_disconnected">
	<summary>
 Handles the GPS disconnection. Location data are reset and the SetTime form is set up to be Video time instead.
 </summary>
	<remarks></remarks>
</member><member name="M:VideoMiner.VideoMiner.save_GPS_configuration">
	<summary>
 Updates all GPS member variables for settings and saves the configuration for all of them (xml file)
 </summary>
</member><member name="M:VideoMiner.VideoMiner.RefreshGPSStatus">
	<summary>
 Refresh the member variables and labels to reflect when the the GPS data changes. 
 </summary>
	<remarks></remarks>
</member><member name="M:VideoMiner.VideoMiner.frmSetTime_RequestGPS">
	<summary>
 The Set Time form will request GPS time, and this function handles that
 </summary>
</member><member name="M:VideoMiner.VideoMiner.frmSetTime_TimeSourceChanged">
	<summary>
 Handles an event to grab the time from the frmSetTime form.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.frmGpsSettings_DataChanged">
	<summary>
 Handles an event to grab the latest data from the GPS device.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.UnHandledHandler(System.Object,System.UnhandledExceptionEventArgs)">
	<summary>
 Handle everything not handled by .NET handlers. This will catch crossthread exceptions as well.
 Important as it gives a message about the error and the stack trace at the time the exception was thrown.
 </summary>
</member><member name="M:VideoMiner.VideoMiner.Me_Closing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
 When the user clicks the X to close the application, this handles that and closes any open forms and sets them up for garbage collection
 </summary>
</member><member name="M:VideoMiner.VideoMiner.AlwaysShowNewestRecordToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 If user changes the selection, just refresh the data so that the new selection is reflected.
 </summary>
</member><member name="T:VideoMiner.VideoMiner">
	<summary>
 This is the main form for the program, and instantiates most of the other forms.
 </summary>
</member><member name="M:VideoMiner.frmSpeciesList.frmSpeciesList_Activated(System.Object,System.EventArgs)">
	<summary>
 Fires when the List becomes active, and calls a function to fill the list from the database.
 </summary>
</member><member name="M:VideoMiner.frmSpeciesList.fillSpeciesList">
	<summary>
 Fills in the species list from the database
 </summary>
</member><member name="M:VideoMiner.frmSpeciesList.cmdMoveUp_Click(System.Object,System.EventArgs)">
	<summary>
 Move the selected row up by one, and make this change in the database. If the selected item is the first one, do nothing.
 </summary>
</member><member name="M:VideoMiner.frmSpeciesList.cmdMoveDown_Click(System.Object,System.EventArgs)">
	<summary>
 Move the selected row down by one, and make this change in the database. If the selected item is the last one, do nothing.
 </summary>
</member><member name="M:VideoMiner.frmSpeciesList.cmdMoveToTop_Click(System.Object,System.EventArgs)">
	<summary>
 Move the selected row up to the top, and make this change in the database. If the selected item is the first one, do nothing.
 </summary>
</member><member name="M:VideoMiner.frmSpeciesList.cmdMoveToBottom_Click(System.Object,System.EventArgs)">
	<summary>
 Move the selected row down to the bottom, and make this change in the database. If the selected item is the last one, do nothing.
 </summary>
</member><member name="M:VideoMiner.frmSpeciesList.MoveListViewItem(System.Int32)">
	<summary>
 Moves the selected item from wherever it is to the given index.
 </summary>
	<param name="moveToIndex">Index to move the selected item to. 0 is the first element.</param>
</member><member name="M:VideoMiner.frmSpeciesList.cmdInsertNew_Click(System.Object,System.EventArgs)">
	<summary>
 Bring up the EditSpecies form with empty fields.
 </summary>
</member><member name="M:VideoMiner.frmSpeciesList.cmdEdit_Click(System.Object,System.EventArgs)">
	<summary>
 When the user clicks the 'Edit' button, the species code will be set in the frmEditSpecies and then a command run to fill the fields in
 with the corresponding information from the database for that species code. Then the form will be shown.
 </summary>
</member><member name="M:VideoMiner.frmSpeciesList.UpdateDrawingOrder">
	<summary>
 Change the database to relect the user change in order in the list. Once the database has been modified, raise an event to the main form so that
 the dynamic panel can be redrawn.
 </summary>
</member><member name="M:VideoMiner.frmSpeciesList.cmdDelete_Click(System.Object,System.EventArgs)">
	<summary>
 When the user clicks the delete button, whatever list item is selected will be deleted from the database and removed from the button collection.
 A confirmation dialog will be issued first.
 </summary>
</member><member name="M:VideoMiner.frmSpeciesList.buttonsModified">
	<summary>
 Handles the case in which the user has changed something about the species buttons layout using the edit species buttons form.
 </summary>
</member><member name="T:VideoMiner.frmSpeciesList">
	<summary>
 This form allows the user to change the order and/or information about the species in the database table 'videominer_species_buttons'. It also allows
 for new species to be enetered (new buttons) or for species to be deleted (removes buttons).
 </summary>
	<remarks>The changes made by the user are enacted by first making changes to the database, then firing an event to the main videominer form, where the dynamic panel will be
 deleted and recreated using the constructor code found in the DynamicPanel class.</remarks>
</member>
</members>
</doc>